<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Title</title>
    <!-- 실행: npm run dev -->
    <script src="https://unpkg.com/blockly/blockly.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css">
    <!--이벤트,동작-->
    <script>

        Blockly.Blocks['discord_edit'] = {
            init: function () {
                this.appendValueInput("message")
                    .setCheck("Msg")
                    .appendField("메시지:");
                this.appendValueInput("edit")
                    .setCheck("String")
                    .appendField("를");
                this.appendDummyInput()
                    .appendField("로 수정하기");
                this.setInputsInline(true);
                this.setPreviousStatement(true, null);
                this.setNextStatement(true, null);
                this.setColour("#498BA8");
                this.setTooltip("");
                this.setHelpUrl("");
            }
        };
        Blockly.JavaScript['discord_edit'] = function (block) {
            var value_message = Blockly.JavaScript.valueToCode(block, 'message', Blockly.JavaScript.ORDER_ATOMIC);
            var value_edit = Blockly.JavaScript.valueToCode(block, 'edit', Blockly.JavaScript.ORDER_ATOMIC);

            var code = `${value_message}.edit(${value_edit});\n`;
            return code;
        };
        Blockly.Blocks['discord_delete'] = {
            init: function () {
                this.appendValueInput("message")
                    .setCheck("Msg")
                    .appendField("메시지:");
                this.appendDummyInput()
                    .appendField("삭제하기");
                this.setInputsInline(true);
                this.setPreviousStatement(true, null);
                this.setNextStatement(true, null);
                this.setColour("#498BA8");
                this.setTooltip("");
                this.setHelpUrl("");
            }
        };
        Blockly.JavaScript['discord_delete'] = function (block) {
            var value_message = Blockly.JavaScript.valueToCode(block, 'message', Blockly.JavaScript.ORDER_ATOMIC);

            var code = `${value_message}.delete();\n`;
            return code;
        };
        Blockly.Blocks['discord_send'] = {
            init: function () {
                this.appendDummyInput()
                    .appendField("채널:");
                this.appendValueInput("channel")
                    .setCheck("Channel");
                this.appendDummyInput()
                    .appendField("에 텍스트:");
                this.appendValueInput("message")
                    .setCheck("String");
                this.appendDummyInput()
                    .appendField("보내기");
                this.setInputsInline(true);
                this.setPreviousStatement(true, null);
                this.setNextStatement(true, null);
                this.setColour("#498BA8");
                this.setTooltip("");
                this.setHelpUrl("");
            }
        };
        Blockly.JavaScript['discord_send'] = function (block) {
            var value_channel = Blockly.JavaScript.valueToCode(block, 'channel', Blockly.JavaScript.ORDER_ATOMIC);
            var value_message = Blockly.JavaScript.valueToCode(block, 'message', Blockly.JavaScript.ORDER_ATOMIC);

            var code = `${value_channel}.send(${value_message});\n`;
            return code;
        };

        Blockly.Blocks['event_message'] = {
            init: function () {
                this.appendDummyInput()
                    .appendField("메시지가 수신되었을 때");
                this.appendDummyInput()
                    .appendField("메시지 변수 :")
                    .appendField(new Blockly.FieldVariable("message"), "NAME");
                this.appendStatementInput("NAME")
                    .setCheck("");
                this.setColour("#498BA8");
                this.setTooltip("");
                this.setHelpUrl("");
            }
        };
        Blockly.JavaScript['event_message'] = function (block) {
            var variable_name = Blockly.JavaScript.nameDB_.getName(block.getFieldValue('NAME'), Blockly.Variables.NAME_TYPE);
            var statements_name = Blockly.JavaScript.statementToCode(block, 'NAME');

            var code = `client.on('message', (message) => {;\n
    ${statements_name}
    })\n`
            return code;
        };

        Blockly.Blocks['event_ready'] = {
            init: function () {
                this.appendDummyInput()
                    .appendField("봇 연결에 성공했을 때");
                this.appendStatementInput("NAME")
                    .setCheck(null);
                this.setColour("#498BA8");
                this.setTooltip("");
                this.setHelpUrl("");
            }
        };
        Blockly.JavaScript['event_ready'] = function (block) {
            var statements_name = Blockly.JavaScript.statementToCode(block, 'NAME');

            var code = `client.on('ready', () => {;\n
    ${statements_name}
    })\n`
            return code;
        };

        Blockly.Blocks['event_memin'] = {
            init: function () {
                this.appendDummyInput()
                    .appendField("멤버가 들어왔을 때");
                this.appendDummyInput()
                    .appendField("멤버 변수 :")
                    .appendField(new Blockly.FieldVariable("memberin"), "NAME");
                this.appendStatementInput("NAME")
                    .setCheck(null);
                this.setColour("#498BA8");
                this.setTooltip("");
                this.setHelpUrl("");
            }
        };
        Blockly.JavaScript['event_memin'] = function (block) {
            var statements_name = Blockly.JavaScript.statementToCode(block, 'NAME');

            var code = `client.on('guildMemberAdd', memberin => {;\n
    ${statements_name}
    })\n`
            return code;
        };

        Blockly.Blocks['event_memout'] = {
            init: function () {
                this.appendDummyInput()
                    .appendField("멤버가 들어왔을 때");
                this.appendDummyInput()
                    .appendField("멤버 변수 :")
                    .appendField(new Blockly.FieldVariable("memberout"), "NAME");
                this.appendStatementInput("NAME")
                    .setCheck(null);
                this.setColour("#498BA8");
                this.setTooltip("");
                this.setHelpUrl("");
            }
        };
        Blockly.JavaScript['event_memout'] = function (block) {
            var statements_name = Blockly.JavaScript.statementToCode(block, 'NAME');

            var code = `client.on('guildMemberAdd', memberout => {;\n
    ${statements_name}
    })\n`
            return code;
        };

    </script>
    <!--값-->
    <script>
        Blockly.Blocks['prop_user'] = {
            init: function () {
                this.appendDummyInput()
                    .appendField(new Blockly.FieldDropdown([["ID가", "id"], ["메시지", "msg"]]), "select");
                this.appendValueInput("value")
                    .setCheck(["String", "Msg"]);
                this.appendDummyInput()
                    .appendField(new Blockly.FieldLabelSerializable("유저"), "dyn_user")
                this.setInputsInline(true);
                this.setOutput(true, "User");
                this.setColour("#498BA8");
                this.setTooltip("");
                this.setHelpUrl("");
            }
        };
        Blockly.JavaScript['prop_user'] = function (block) {
            var dropdown_select = block.getFieldValue('select');
            var value_value = Blockly.JavaScript.valueToCode(block, 'value', Blockly.JavaScript.ORDER_ATOMIC);

            if (dropdown_select == 'id') {
                var code = `client.users.fetch(${value_value})`;
                block.setFieldValue('를 가진 유저', 'dyn_user')
            }
            if (dropdown_select == 'msg') {
                var code = `message.channel.messages.fetch(${value_value})`;
                block.setFieldValue('를 가진 메시지', 'dyn_user')
            }

            return [code, Blockly.JavaScript.ORDER_NONE];
        };
        Blockly.Blocks['prop_id'] = {
            init: function () {
                this.appendDummyInput()
                    .appendField(new Blockly.FieldDropdown([["메시지", "msg"], ["사용자", "user"]]), "select");
                this.appendValueInput("value")
                    .setCheck(["User", "Message"]);
                this.appendDummyInput()
                    .appendField(new Blockly.FieldLabelSerializable("아이디"), "dyn_id")
                this.setInputsInline(true);
                this.setOutput(true, "String");
                this.setColour("#498BA8");
                this.setTooltip("");
                this.setHelpUrl("");
            }
        };
        Blockly.JavaScript['prop_id'] = function (block) {
            var dropdown_select = block.getFieldValue('select');
            var value_value = Blockly.JavaScript.valueToCode(block, 'value', Blockly.JavaScript.ORDER_ATOMIC);

            if (dropdown_select == 'msg') {
                var code = `${value_value}.id`;
                block.setFieldValue('의 ID', 'dyn_id')
            }
            if (dropdown_select == 'user') {
                var code = `${value_value}.id`;
                block.setFieldValue('의 ID', 'dyn_id')
            }
            return [code, Blockly.JavaScript.ORDER_NONE];
        };
        Blockly.Blocks['prop_content'] = {
            init: function () {
                this.appendDummyInput()
                    .appendField(new Blockly.FieldDropdown([["메시지", "msg"], ["사용자", "user"]]), "select");
                this.appendValueInput("value")
                    .setCheck(["Msg", "User"]);
                this.appendDummyInput()
                    .appendField(new Blockly.FieldLabelSerializable("내용"), 'dyn_content');
                this.setInputsInline(true);
                this.setOutput(true, "String");
                this.setColour("#498BA8");
                this.setTooltip("");
                this.setHelpUrl("");
            }
        };
        Blockly.JavaScript['prop_content'] = function (block) {
            var dropdown_select = block.getFieldValue('select');
            var value_value = Blockly.JavaScript.valueToCode(block, 'value', Blockly.JavaScript.ORDER_ATOMIC);

            if (dropdown_select == 'msg') {
                var code = `${value_value}.content`;
                block.setFieldValue('의 내용', 'dyn_content')
            }
            if (dropdown_select == 'user') {
                var code = `${value_value}.username`;
                block.setFieldValue('의 닉네임', 'dyn_content')
            }

            return [code, Blockly.JavaScript.ORDER_NONE];
        };
        Blockly.Blocks['prop_channel'] = {
            init: function () {
                this.appendDummyInput()
                    .appendField(new Blockly.FieldDropdown([["메시지", "msg"], ["아이디", "id"]]), "select");
                this.appendValueInput("value")
                    .setCheck(["Msg", "String"]);
                this.appendDummyInput()
                    .appendField(new Blockly.FieldLabelSerializable("채널"), "dyn_channel");
                this.setInputsInline(true);
                this.setOutput(true, "Channel");
                this.setColour("#498BA8");
                this.setTooltip("");
                this.setHelpUrl("");
            }
        };
        Blockly.JavaScript['prop_channel'] = function (block) {
            var dropdown_select = block.getFieldValue('select');
            var value_value = Blockly.JavaScript.valueToCode(block, 'value', Blockly.JavaScript.ORDER_ATOMIC);

            if (dropdown_select == 'id') {
                var code = `client.channels.cache.get(${value_value})`;
                block.setFieldValue('를 가진 채널', 'dyn_channel')
            }
            if (dropdown_select == 'msg') {
                var code = `${value_value}.channel`;
                block.setFieldValue('를 받은 채널', 'dyn_channel')
            }
            return [code, Blockly.JavaScript.ORDER_NONE];
        };
        Blockly.Blocks['prop_msg'] = {
            init: function () {
                this.appendDummyInput()
                    .appendField("채널");
                this.appendValueInput("value")
                    .setCheck("Channel");
                this.appendDummyInput()
                    .appendField("에서 아이디 ");
                this.appendValueInput("value2")
                    .setCheck(["String", "Number"]);
                this.appendDummyInput()
                    .appendField(new Blockly.FieldLabelSerializable("를 가진 메시지"), "dyn_msg");
                this.setInputsInline(true);
                this.setOutput(true, "Msg");
                this.setColour("#498BA8");
                this.setTooltip("");
                this.setHelpUrl("");
            }
        };
        Blockly.JavaScript['prop_msg'] = function (block) {
            var value_value = Blockly.JavaScript.valueToCode(block, 'value', Blockly.JavaScript.ORDER_ATOMIC);
            var dropdown_select = block.getFieldValue('value');
            var value_value2 = Blockly.JavaScript.valueToCode(block, 'value2', Blockly.JavaScript.ORDER_ATOMIC);

            var code = `${value_value}.messages.fetch(${value_value2})`;
            block.setFieldValue('를 가진 메시지', 'dyn_msg')

            return [code, Blockly.JavaScript.ORDER_NONE];
        };
        Blockly.Blocks['prop_msg2'] = {
            init: function () {
                this.appendDummyInput()
                    .appendField(new Blockly.FieldVariable("getmsg"), "NAME");
                this.appendValueInput("channel")
                    .setCheck(null)
                    .appendField("변수 = 채널");
                this.appendValueInput("number")
                    .setCheck(null)
                    .appendField("아래에서");
                this.appendDummyInput()
                    .appendField("번째");
                this.appendStatementInput("NAME")
                    .setCheck(null)
                    .appendField("실행:");
                this.setInputsInline(true);
                this.setPreviousStatement(true, null);
                this.setNextStatement(true, null);
                this.setColour("#498BA8");
                this.setTooltip("");
                this.setHelpUrl("");
            }
        };
        Blockly.JavaScript['prop_msg2'] = function (block) {
            var variable_name = Blockly.JavaScript.nameDB_.getName(block.getFieldValue('NAME'), Blockly.Variables.NAME_TYPE);
            var value_channel = Blockly.JavaScript.valueToCode(block, 'channel', Blockly.JavaScript.ORDER_ATOMIC);
            var value_number = Blockly.JavaScript.valueToCode(block, 'number', Blockly.JavaScript.ORDER_ATOMIC);
            var statements_name = Blockly.JavaScript.statementToCode(block, 'NAME');
            var code = `${value_channel}.messages.fetch({ limit: '${value_number}'}).then((getmsg)=>{getmsg = getmsg.last(); ${statements_name}})`;
            return code;
        };
        Blockly.Blocks['textinclude'] = {
            init: function () {
                this.appendValueInput("text")
                    .setCheck(null)
                    .appendField("텍스트");
                this.appendValueInput("include")
                    .setCheck(null)
                    .appendField("가");
                this.appendDummyInput()
                    .appendField("로 시작하는가?");
                this.setInputsInline(true);
                this.setOutput(true, null);
                this.setColour("#5CA68D");
                this.setTooltip("");
                this.setHelpUrl("");
            }
        };
        Blockly.JavaScript['textinclude'] = function (block) {
            var value_text = Blockly.JavaScript.valueToCode(block, 'text', Blockly.JavaScript.ORDER_ATOMIC);
            var value_include = Blockly.JavaScript.valueToCode(block, 'include', Blockly.JavaScript.ORDER_ATOMIC);
            var code = `${value_text}.startsWith(${value_include})`;

            return [code, Blockly.JavaScript.ORDER_NONE];
        };

    </script>

    <script>
        Blockly.Msg["ADD_COMMENT"] = "덧글 추가";
        Blockly.Msg["CANNOT_DELETE_VARIABLE_PROCEDURE"] = "%1이 함수 %2의 정의에 사용되었기 때문에 삭제될 수 없습니다"; //이거 없음
        Blockly.Msg["CHANGE_VALUE_TITLE"] = "값 바꾸기";
        Blockly.Msg["CLEAN_UP"] = "블록 정리하기";	//이거 없음
        Blockly.Msg["COLLAPSED_WARNINGS_WARNING"] = "접힌 블록에 오류가 있습니다";	//이거 없음
        Blockly.Msg["COLLAPSE_ALL"] = "모든 블록 축소";
        Blockly.Msg["COLLAPSE_BLOCK"] = "블록 축소";
        Blockly.Msg["LISTS_INLIST"] = "리스트";
        Blockly.Msg["CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK"] = "반복 중단";
        Blockly.Msg["CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE"] = "다음 반복";
        Blockly.Msg["CONTROLS_FLOW_STATEMENTS_WARNING"] = "경고: 이 블록은 반복 실행 블럭 안에서만 사용됩니다.";
        Blockly.Msg["CONTROLS_FOREACH_TITLE"] = "각 항목에 대해 %1 목록으로 %2";
        Blockly.Msg["CONTROLS_FOR_TITLE"] = "으로 계산 %1 %2에서 %4을 이용하여 %3로";
        Blockly.Msg["CONTROLS_IF_MSG_ELSE"] = "아니라면";
        Blockly.Msg["CONTROLS_IF_MSG_ELSEIF"] = "다른 경우";
        Blockly.Msg["CONTROLS_IF_MSG_IF"] = "만약에";
        Blockly.Msg["CONTROLS_REPEAT_INPUT_DO"] = "하기";
        Blockly.Msg["CONTROLS_REPEAT_TITLE"] = "%1회 반복";
        Blockly.Msg["CONTROLS_WHILEUNTIL_OPERATOR_UNTIL"] = "다음까지 반복";
        Blockly.Msg["CONTROLS_WHILEUNTIL_OPERATOR_WHILE"] = "동안 반복하기";
        Blockly.Msg["DELETE_ALL_BLOCKS"] = "모든 %1 블록을 지울까요?";		//이거 없음
        Blockly.Msg["DELETE_BLOCK"] = "블록 삭제";
        Blockly.Msg["DELETE_VARIABLE"] = "%1 변수 지우기";		//이거 없음
        Blockly.Msg["DELETE_VARIABLE_CONFIRMATION"] = "변수 %2가 사용된 %1가지 항목을 지우시겠습니까?";	//이거 없음
        Blockly.Msg["DELETE_X_BLOCKS"] = "블록 %1 삭제";
        Blockly.Msg["DISABLE_BLOCK"] = "블록 비활성화";
        Blockly.Msg["DUPLICATE_BLOCK"] = "중복됨";
        Blockly.Msg["DUPLICATE_COMMENT"] = "주석 복제하기";		//이거 없음
        Blockly.Msg["ENABLE_BLOCK"] = "블록 활성화";
        Blockly.Msg["EXPAND_ALL"] = "모든 블럭 확장";
        Blockly.Msg["EXPAND_BLOCK"] = "블럭 확장";
        Blockly.Msg["EXTERNAL_INPUTS"] = "외부 입력";
        Blockly.Msg["HELP"] = "도움말";
        Blockly.Msg["INLINE_INPUTS"] = "내부 입력";
        Blockly.Msg["IOS_CANCEL"] = "취소";		//이거 없음
        Blockly.Msg["IOS_ERROR"] = "오류";		//이거 없음
        Blockly.Msg["IOS_OK"] = "OK";		//이거 없음
        Blockly.Msg["IOS_PROCEDURES_ADD_INPUT"] = "+ 입력값 추가하기";	//+ Add Input		//이거 없음
        Blockly.Msg["IOS_PROCEDURES_ALLOW_STATEMENTS"] = "코드들 허용하기";	//allow statements(statement를 코드 조각으로 해석)		//이거 없음
        Blockly.Msg["IOS_PROCEDURES_DUPLICATE_INPUTS_ERROR"] = "이 함수는 중복 입력을 가지고 있습니다.";	//This function has duplicate inputs.		//이거 없음
        Blockly.Msg["IOS_PROCEDURES_INPUTS"] = "입력값";		//INPUTS		//이거 없음
        Blockly.Msg["IOS_VARIABLES_ADD_BUTTON"] = "추가하기";		//Add		//이거 없음
        Blockly.Msg["IOS_VARIABLES_ADD_VARIABLE"] = "변수 추가하기";	//+ Add Variable		//이거 없음
        Blockly.Msg["IOS_VARIABLES_DELETE_BUTTON"] = "지우기";	//delete		//이거 없음
        Blockly.Msg["IOS_VARIABLES_EMPTY_NAME_ERROR"] = "빈 변수 이름을 사용할 수 없습니다.";		//이거 없음
        Blockly.Msg["IOS_VARIABLES_RENAME_BUTTON"] = "변수 이름 바꾸기";		//이거 없음
        Blockly.Msg["IOS_VARIABLES_VARIABLE_NAME"] = "변수 이름";		//이거 없음
        Blockly.Msg["LISTS_CREATE_EMPTY_TITLE"] = "빈 리스트 생성";
        Blockly.Msg["LISTS_CREATE_WITH_CONTAINER_TITLE_ADD"] = "리스트";
        Blockly.Msg["LISTS_CREATE_WITH_INPUT_WITH"] = "리스트 만들기";
        Blockly.Msg["LISTS_GET_INDEX_FIRST"] = "첫번째";
        Blockly.Msg["LISTS_GET_INDEX_FROM_END"] = "마지막 번째 위치부터, # 번째";
        Blockly.Msg["LISTS_GET_INDEX_FROM_START"] = "# 번째";
        Blockly.Msg["LISTS_GET_INDEX_GET"] = "아이템 가져오기";
        Blockly.Msg["LISTS_GET_INDEX_GET_REMOVE"] = "잘라내기";
        Blockly.Msg["LISTS_GET_INDEX_LAST"] = "마지막";
        Blockly.Msg["LISTS_GET_INDEX_RANDOM"] = "임의로";
        Blockly.Msg["LISTS_GET_INDEX_REMOVE"] = "삭제";
        Blockly.Msg["LISTS_GET_INDEX_TAIL"] = "";
        Blockly.Msg["LISTS_GET_SUBLIST_END_FROM_END"] = "끝에서부터 # 번째로";
        Blockly.Msg["LISTS_GET_SUBLIST_END_FROM_START"] = "앞에서부터 # 번째로";
        Blockly.Msg["LISTS_GET_SUBLIST_END_LAST"] = "마지막으로";
        Blockly.Msg["LISTS_GET_SUBLIST_START_FIRST"] = "첫 번째 위치부터, 서브 리스트 추출";
        Blockly.Msg["LISTS_GET_SUBLIST_START_FROM_END"] = "마지막부터 # 번째 위치부터, 서브 리스트 추출";
        Blockly.Msg["LISTS_GET_SUBLIST_START_FROM_START"] = "처음 # 번째 위치부터, 서브 리스트 추출";
        Blockly.Msg["LISTS_GET_SUBLIST_TAIL"] = "";
        Blockly.Msg["LISTS_INDEX_OF_FIRST"] = "처음으로 나타난 위치";
        Blockly.Msg["LISTS_INDEX_OF_LAST"] = "마지막으로 나타난 위치";
        Blockly.Msg["LISTS_INLIST"] = "리스트";
        Blockly.Msg["LISTS_ISEMPTY_TITLE"] = "%1이 비어 있는가?";
        Blockly.Msg["LISTS_LENGTH_TITLE"] = "%1의 길이";
        Blockly.Msg["LISTS_REPEAT_TITLE"] = "%1 을 %2 번 넣어, 리스트 생성";
        Blockly.Msg["LISTS_REVERSE_MESSAGE0"] = "%1 뒤집기";		//이거 없음
        Blockly.Msg["LISTS_SET_INDEX_INPUT_TO"] = "에";
        Blockly.Msg["LISTS_SET_INDEX_INSERT"] = "에서 원하는 위치에 삽입";
        Blockly.Msg["LISTS_SET_INDEX_SET"] = "에서 설정";
        Blockly.Msg["LISTS_SORT_ORDER_ASCENDING"] = "오름차순";		//이거 없음
        Blockly.Msg["LISTS_SORT_ORDER_DESCENDING"] = "내림차순";		//이거 없음
        Blockly.Msg["LISTS_SORT_TITLE"] = "%1 %2 %3 정렬하기";	//sort %1 %2 %3		//이거 없음
        Blockly.Msg["LISTS_SORT_TYPE_IGNORECASE"] = "알파벳 대소문자 무시하기";	//alphabetic, ignore case	//이거 없음
        Blockly.Msg["LISTS_SORT_TYPE_NUMERIC"] = "숫자의";	//이거 없음
        Blockly.Msg["LISTS_SORT_TYPE_TEXT"] = "알파벳의";	//alphabetic	//이거 없음
        Blockly.Msg["LISTS_SPLIT_LIST_FROM_TEXT"] = "텍스트에서 목록 만들기";
        Blockly.Msg["LISTS_SPLIT_TEXT_FROM_LIST"] = "목록에서 문자 만들기";
        Blockly.Msg["LISTS_SPLIT_WITH_DELIMITER"] = "분리와";	//with delimiter
        Blockly.Msg["LOGIC_BOOLEAN_FALSE"] = "거짓";
        Blockly.Msg["LOGIC_BOOLEAN_TRUE"] = "참";
        Blockly.Msg["LOGIC_NEGATE_TITLE"] = "%1의 반대";
        Blockly.Msg["LOGIC_NULL"] = "빈 값";
        Blockly.Msg["LOGIC_OPERATION_AND"] = "그리고";
        Blockly.Msg["LOGIC_OPERATION_OR"] = "또는";
        Blockly.Msg["LOGIC_TERNARY_CONDITION"] = "테스트";
        Blockly.Msg["LOGIC_TERNARY_IF_FALSE"] = "만약 거짓이라면";
        Blockly.Msg["LOGIC_TERNARY_IF_TRUE"] = "만약 참이라면";
        Blockly.Msg["MATH_ADDITION_SYMBOL"] = "+";
        Blockly.Msg["MATH_ATAN2_TITLE"] = "atan2 of X:%1 Y:%2";		//이거 없음
        Blockly.Msg["MATH_CHANGE_TITLE"] = "바꾸기 %1 만큼 %2";
        Blockly.Msg["MATH_CONSTRAIN_TITLE"] = "%1 의 값을, 최소 %2 최대 %3 으로 조정";
        Blockly.Msg["MATH_DIVISION_SYMBOL"] = "÷";
        Blockly.Msg["MATH_IS_DIVISIBLE_BY"] = "가 다음 수로 나누어 떨어지면 :";
        Blockly.Msg["MATH_IS_EVEN"] = "가 짝수이면";
        Blockly.Msg["MATH_IS_NEGATIVE"] = "가 음수이면";
        Blockly.Msg["MATH_IS_ODD"] = "가 홀수이면";
        Blockly.Msg["MATH_IS_POSITIVE"] = "가 양수이면";
        Blockly.Msg["MATH_IS_PRIME"] = "가 소수이면";
        Blockly.Msg["MATH_IS_WHOLE"] = "가 정수이면";
        Blockly.Msg["MATH_MODULO_TITLE"] = "%1 를 %2 로 나눈 나머지";
        Blockly.Msg["MATH_MULTIPLICATION_SYMBOL"] = "×";
        Blockly.Msg["MATH_ONLIST_HELPURL"] = "";
        Blockly.Msg["MATH_ONLIST_OPERATOR_AVERAGE"] = "평균값";
        Blockly.Msg["MATH_ONLIST_OPERATOR_MAX"] = "최댓값";
        Blockly.Msg["MATH_ONLIST_OPERATOR_MEDIAN"] = "중간값";
        Blockly.Msg["MATH_ONLIST_OPERATOR_MIN"] = "최솟값";
        Blockly.Msg["MATH_ONLIST_OPERATOR_MODE"] = "최빈값";
        Blockly.Msg["MATH_ONLIST_OPERATOR_RANDOM"] = "목록의 임의 아이템";
        Blockly.Msg["MATH_ONLIST_OPERATOR_STD_DEV"] = "표준 편차";
        Blockly.Msg["MATH_ONLIST_OPERATOR_SUM"] = "합";
        Blockly.Msg["MATH_POWER_SYMBOL"] = "^";
        Blockly.Msg["MATH_RANDOM_FLOAT_TITLE_RANDOM"] = "임의 분수";
        Blockly.Msg["MATH_RANDOM_INT_TITLE"] = "랜덤정수(%1<= n <=%2)";
        Blockly.Msg["MATH_ROUND_OPERATOR_ROUND"] = "반올림";
        Blockly.Msg["MATH_ROUND_OPERATOR_ROUNDDOWN"] = "버림";
        Blockly.Msg["MATH_ROUND_OPERATOR_ROUNDUP"] = "올림";
        Blockly.Msg["MATH_SINGLE_OP_ABSOLUTE"] = "절댓값";
        Blockly.Msg["MATH_SINGLE_OP_ROOT"] = "제곱근";
        Blockly.Msg["MATH_SUBTRACTION_SYMBOL"] = "-";
        Blockly.Msg["MATH_TRIG_ACOS"] = "acos";
        Blockly.Msg["MATH_TRIG_ASIN"] = "asin";
        Blockly.Msg["MATH_TRIG_ATAN"] = "atan";
        Blockly.Msg["MATH_TRIG_COS"] = "cos";
        Blockly.Msg["MATH_TRIG_SIN"] = "sin";
        Blockly.Msg["MATH_TRIG_TAN"] = "tan";
        Blockly.Msg["NEW_NUMBER_VARIABLE"] = "숫자 변수 만들기";	//이거 없음
        Blockly.Msg["NEW_STRING_VARIABLE"] = "문자 변수 만들기";	//이거 없음
        Blockly.Msg["NEW_VARIABLE"] = "새 변수";
        Blockly.Msg["NEW_VARIABLE_TITLE"] = "새 변수 이름:";
        Blockly.Msg["NEW_VARIABLE_TYPE_TITLE"] = "새 변수 타입:";		//이거 없음
        Blockly.Msg["ORDINAL_NUMBER_SUFFIX"] = "";
        Blockly.Msg["PROCEDURES_ALLOW_STATEMENTS"] = "서술 허용하기";
        Blockly.Msg["PROCEDURES_BEFORE_PARAMS"] = "사용:";
        Blockly.Msg["PROCEDURES_CALL_BEFORE_PARAMS"] = "사용:";
        Blockly.Msg["PROCEDURES_CREATE_DO"] = "'%1' 생성";
        Blockly.Msg["PROCEDURES_DEFNORETURN_COMMENT"] = "함수 설명을 입력하세요:";	//이거 없음
        Blockly.Msg["PROCEDURES_DEFNORETURN_DO"] = "";
        Blockly.Msg["PROCEDURES_DEFNORETURN_PROCEDURE"] = "함수 이름";	//do something
        Blockly.Msg["PROCEDURES_DEFNORETURN_TITLE"] = "함수";
        Blockly.Msg["PROCEDURES_DEFRETURN_RETURN"] = "다음을 돌려줌";
        Blockly.Msg["PROCEDURES_DEF_DUPLICATE_WARNING"] = "경고: 이 함수에는, 같은 이름을 사용하는 매개 변수들이 있습니다.";
        Blockly.Msg["PROCEDURES_HIGHLIGHT_DEF"] = "함수 정의 찾기";	//Highlight function definition
        Blockly.Msg["PROCEDURES_IFRETURN_WARNING"] = "경고: 이 블럭은, 함수 정의 블럭 안에서만 사용할 수 있습니다.";
        Blockly.Msg["PROCEDURES_MUTATORARG_TITLE"] = "매개 변수:";
        Blockly.Msg["PROCEDURES_MUTATORCONTAINER_TITLE"] = "매개 변수들";
        Blockly.Msg["REDO"] = "재실행";
        Blockly.Msg["REMOVE_COMMENT"] = "내용 제거";
        Blockly.Msg["RENAME_VARIABLE"] = "변수 이름 변경하기:";
        Blockly.Msg["RENAME_VARIABLE_TITLE"] = "'%1' 변수 이름을 변경하기";
        Blockly.Msg["TEXT_APPEND_TITLE"] = "%1에 text %2를 추가하기";		//to %1 append text %2	//이거 없음
        Blockly.Msg["TEXT_CHANGECASE_OPERATOR_LOWERCASE"] = "소문자로 바꾸기";
        Blockly.Msg["TEXT_CHANGECASE_OPERATOR_TITLECASE"] = "첫 문자만 대문자로 바꾸기";
        Blockly.Msg["TEXT_CHANGECASE_OPERATOR_UPPERCASE"] = "대문자로 바꾸기";
        Blockly.Msg["TEXT_CHARAT_FIRST"] = "에서, 첫 번째 문자 얻기";
        Blockly.Msg["TEXT_CHARAT_FROM_END"] = "에서, 마지막부터 # 번째 위치의 문자 얻기";
        Blockly.Msg["TEXT_CHARAT_FROM_START"] = "에서, 앞에서부터 # 번째 위치의 문자 얻기";
        Blockly.Msg["TEXT_CHARAT_LAST"] = "에서, 마지막 문자 얻기";
        Blockly.Msg["TEXT_CHARAT_RANDOM"] = "에서, 랜덤하게 한 문자 얻기";
        Blockly.Msg["TEXT_CHARAT_TAIL"] = "";
        Blockly.Msg["TEXT_CHARAT_TITLE"] = "in text %1 %2";		//이거 없음
        Blockly.Msg["TEXT_COUNT_MESSAGE0"] = "%2에 포함된 %1 세기";	//count %1 in %2	//이거 없음
        Blockly.Msg["TEXT_CREATE_JOIN_TITLE_JOIN"] = "join";		//이거 없음
        Blockly.Msg["TEXT_GET_SUBSTRING_END_FROM_END"] = "끝에서부터 # 번째 문자까지";
        Blockly.Msg["TEXT_GET_SUBSTRING_END_FROM_START"] = "# 번째 문자까지";
        Blockly.Msg["TEXT_GET_SUBSTRING_END_LAST"] = "마지막 문자까지";
        Blockly.Msg["TEXT_GET_SUBSTRING_INPUT_IN_TEXT"] = "문장";
        Blockly.Msg["TEXT_GET_SUBSTRING_START_FIRST"] = "에서, 처음부터 얻어냄";
        Blockly.Msg["TEXT_GET_SUBSTRING_START_FROM_END"] = "에서, 마지막에서 # 번째부터 얻어냄";
        Blockly.Msg["TEXT_GET_SUBSTRING_START_FROM_START"] = "에서, 처음에서 # 번째 문자부터 얻어냄";
        Blockly.Msg["TEXT_GET_SUBSTRING_TAIL"] = "";
        Blockly.Msg["TEXT_INDEXOF_OPERATOR_FIRST"] = "에서 다음 문장이 처음으로 나타난 위치 찾기 :";
        Blockly.Msg["TEXT_INDEXOF_OPERATOR_LAST"] = "에서 다음 문장이 마지막으로 나타난 위치 찾기 :";
        Blockly.Msg["TEXT_INDEXOF_TITLE"] = "in text %1 %2 %3";		//이거 없음
        Blockly.Msg["TEXT_ISEMPTY_TITLE"] = "%1이 비어 있는가?";
        Blockly.Msg["TEXT_JOIN_TITLE_CREATEWITH"] = "텍스트 만들기";
        Blockly.Msg["TEXT_LENGTH_TITLE"] = "%1의 길이";
        Blockly.Msg["TEXT_PRINT_TITLE"] = "%1 출력하기";
        Blockly.Msg["TEXT_PROMPT_TYPE_NUMBER"] = "다음 안내 멘트를 활용해 수 입력";
        Blockly.Msg["TEXT_PROMPT_TYPE_TEXT"] = "다음 안내 멘트를 활용해 문장 입력";
        Blockly.Msg["TEXT_REPLACE_MESSAGE0"] = "%3에서 %1을 %2로 바꾸기";	//replace %1 with %2 in %3		//이거 없음
        Blockly.Msg["TEXT_REVERSE_MESSAGE0"] = "%1 뒤집기";	//reverse %1	//이거 없음
        Blockly.Msg["TEXT_TRIM_OPERATOR_BOTH"] = "양쪽의 공백 문자 제거";
        Blockly.Msg["TEXT_TRIM_OPERATOR_LEFT"] = "왼쪽의 공백 문자 제거";
        Blockly.Msg["TEXT_TRIM_OPERATOR_RIGHT"] = "오른쪽의 공백 문자 제거";
        Blockly.Msg["TODAY"] = "Today";
        Blockly.Msg["UNDO"] = "실행취소";		//이거 없음
        Blockly.Msg["UNNAMED_KEY"] = "이름 지우기";	//이거 없음
        Blockly.Msg["VARIABLES_DEFAULT_NAME"] = "항목";
        Blockly.Msg["VARIABLES_GET_CREATE_SET"] = "'집합 %1' 생성";
        Blockly.Msg["VARIABLES_SET"] = "바꾸기 %1 를 다음 값으로 바꾸기 %2";
        Blockly.Msg["VARIABLES_SET_CREATE_GET"] = "'%1 값 읽기' 블럭 생성";
        Blockly.Msg["VARIABLE_ALREADY_EXISTS"] = "’%1’ 변수가 이미 존재합니다.";	//A variable named '%1' already exists.	//이거 없음
        Blockly.Msg["VARIABLE_ALREADY_EXISTS_FOR_ANOTHER_TYPE"] = "이름이 ‘%1’인 변수가 다른 유형 ‘%2’로 이미 존재합니다.";	//A variable named '%1' already exists for another type: '%2'.	//이거 없음
        Blockly.Msg["WORKSPACE_ARIA_LABEL"] = "Workspace";	//Blockly Workspace	//이거 없음
        Blockly.Msg["WORKSPACE_COMMENT_DEFAULT_TEXT"] = "글자를 입력하세요";		//이거 없음


    </script>

    <style>
        body {
            margin: 0;
            padding: 0;
            height: 100vh;
            width: 100%;
        }

        .main {
            width: 100%;
            height: 100%;
        }

        .middle {
            height: 100%;
            width: 100%;
        }

        #blocklyDiv {
            width: 100%;
            height: 100%;
            float: left;
        }

        path {
            bottom: 0;
            height: 50%;

        }
    </style>
</head>

<body>
    <script>
        function saveWorkspace(name) {
            var xmlDom = Blockly.Xml.workspaceToDom(Blockly.mainWorkspace);
            var xmlText = Blockly.Xml.domToPrettyText(xmlDom);
            let xhr = new XMLHttpRequest()
            xhr.open("POST", "/bot/bot-save")
            xhr.setRequestHeader("Content-Type", "application/json")
            xhr.onreadystatechange = () => {
                if (xhr.status === 200 && xhr.readyState === 4) {
                    console.log(JSON.parse(xhr.responseText))
                }
            }
            xhr.send(JSON.stringify({
                code: xmlText,
                name: name
            }));
            console.log('good')
        }

        function loadWorkspace(name) {
            let xhr = new XMLHttpRequest()
            xhr.open("POST", "/bot/bot-load")
            xhr.setRequestHeader("Content-Type", "application/json")
            xhr.onreadystatechange = () => {
                if (xhr.status === 200 && xhr.readyState === 4) {
                    var xmlText = JSON.parse(xhr.responseText).data;
                    let token = JSON.parse(xhr.responseText).token;
                    start(token)
                    if (xmlText) {
                        Blockly.mainWorkspace.clear();
                        xmlDom = Blockly.Xml.textToDom(xmlText);
                        Blockly.Xml.domToWorkspace(Blockly.mainWorkspace, xmlDom);
                    }
                    return token
                }
            }
            xhr.send(JSON.stringify({
                name: name
            }));
        }

    </script>
    <div class="main">
        <!-- 툴 박스 -->
        <xml id="toolbox" style="display: none">

            <category name="Event" colour="#498BA8">
                <block type="event_message"></block>
                <block type="event_ready"></block>
                <block type="event_memin"></block>
                <block type="event_memout"></block>
            </category>
            <category name="Act" colour="#498BA8">
                <block type="discord_send"></block>
                <block type="discord_edit"></block>
                <block type="discord_delete"></block>
            </category>
            <category name="Properties" colour="#498BA8">
                <block type="prop_user"></block>
                <block type="prop_id"></block>
                <block type="prop_content"></block>
                <block type="prop_channel"></block>
                <block type="prop_msg"></block>
                <block type="prop_msg2"></block>
            </category>
            <sep></sep>
            <category name="Logic" colour="#5C81A6">
                <block type="controls_if"></block>
                <block type="logic_compare">
                    <field name="OP">EQ</field>
                </block>
                <block type="logic_operation">
                    <field name="OP">AND</field>
                </block>
                <block type="logic_negate"></block>
                <block type="logic_boolean">
                    <field name="BOOL">TRUE</field>
                </block>
                <block type="logic_null"></block>
                <block type="logic_ternary"></block>
            </category>
            <category name="Loops" colour="#5CA65C">
                <block type="controls_repeat_ext">
                    <value name="TIMES">
                        <shadow type="math_number">
                            <field name="NUM">0</field>
                        </shadow>
                    </value>
                </block>
                <block type="controls_whileUntil">
                    <field name="MODE">WHILE</field>
                </block>
                <block type="controls_for">
                    <field name="VAR" id=")[(PctVvu3c`*IACnwmm">i</field>
                    <value name="FROM">
                        <shadow type="math_number">
                            <field name="NUM">0</field>
                        </shadow>
                    </value>
                    <value name="TO">
                        <shadow type="math_number">
                            <field name="NUM">0</field>
                        </shadow>
                    </value>
                    <value name="BY">
                        <shadow type="math_number">
                            <field name="NUM">0</field>
                        </shadow>
                    </value>
                </block>
                <block type="controls_forEach">
                    <field name="VAR" id="~a;YXk@k`X$Eb9]Z6{Me">j</field>
                </block>
                <block type="controls_flow_statements">
                    <field name="FLOW">BREAK</field>
                </block>
            </category>
            <category name="Math" colour="#5C68A6">
                <block type="math_round">
                    <field name="OP">ROUND</field>
                    <value name="NUM">
                        <shadow type="math_number">
                            <field name="NUM">0</field>
                        </shadow>
                    </value>
                </block>
                <block type="math_number">
                    <field name="NUM">0</field>
                </block>
                <block type="math_single">
                    <field name="OP">ROOT</field>
                    <value name="NUM">
                        <shadow type="math_number">
                            <field name="NUM">0</field>
                        </shadow>
                    </value>
                </block>
                <block type="math_trig">
                    <field name="OP">SIN</field>
                    <value name="NUM">
                        <shadow type="math_number">
                            <field name="NUM">0</field>
                        </shadow>
                    </value>
                </block>
                <block type="math_constant">
                    <field name="CONSTANT">PI</field>
                </block>
                <block type="math_number_property">
                    <mutation divisor_input="false"></mutation>
                    <field name="PROPERTY">EVEN</field>
                    <value name="NUMBER_TO_CHECK">
                        <shadow type="math_number">
                            <field name="NUM">0</field>
                        </shadow>
                    </value>
                </block>
                <block type="math_arithmetic">
                    <field name="OP">ADD</field>
                    <value name="A">
                        <shadow type="math_number">
                            <field name="NUM">0</field>
                        </shadow>
                    </value>
                    <value name="B">
                        <shadow type="math_number">
                            <field name="NUM">0</field>
                        </shadow>
                    </value>
                </block>
                <block type="math_on_list">
                    <mutation op="SUM"></mutation>
                    <field name="OP">SUM</field>
                </block>
                <block type="math_modulo">
                    <value name="DIVIDEND">
                        <shadow type="math_number">
                            <field name="NUM">0</field>
                        </shadow>
                    </value>
                    <value name="DIVISOR">
                        <shadow type="math_number">
                            <field name="NUM">0</field>
                        </shadow>
                    </value>
                </block>
                <block type="math_constrain">
                    <value name="VALUE">
                        <shadow type="math_number">
                            <field name="NUM">0</field>
                        </shadow>
                    </value>
                    <value name="LOW">
                        <shadow type="math_number">
                            <field name="NUM">0</field>
                        </shadow>
                    </value>
                    <value name="HIGH">
                        <shadow type="math_number">
                            <field name="NUM">0</field>
                        </shadow>
                    </value>
                </block>
                <block type="math_random_int">
                    <value name="FROM">
                        <shadow type="math_number">
                            <field name="NUM">0</field>
                        </shadow>
                    </value>
                    <value name="TO">
                        <shadow type="math_number">
                            <field name="NUM">0</field>
                        </shadow>
                    </value>
                </block>
                <block type="math_random_float"></block>
            </category>
            <category name="Text" colour="#5CA68D">
                <block type="text_charAt">
                    <mutation at="true"></mutation>
                    <field name="WHERE">FROM_START</field>
                    <value name="VALUE">
                        <block type="variables_get">
                            <field name="VAR" id="3lD0;=:EX{.QS(1_E}e_">variable</field>
                        </block>
                    </value>
                </block>
                <block type="text">
                    <field name="TEXT"></field>
                </block>
                <block type="text_append">
                    <field name="VAR" id="3lD0;=:EX{.QS(1_E}e_">variable</field>
                    <value name="TEXT">
                        <shadow type="text">
                            <field name="TEXT"></field>
                        </shadow>
                    </value>
                </block>
                <block type="text_length">
                    <value name="VALUE">
                        <shadow type="text">
                            <field name="TEXT"></field>
                        </shadow>
                    </value>
                </block>
                <block type="text_isEmpty">
                    <value name="VALUE">
                        <shadow type="text">
                            <field name="TEXT"></field>
                        </shadow>
                    </value>
                </block>
                <block type="text_indexOf">
                    <field name="END">FIRST</field>
                    <value name="VALUE">
                        <block type="variables_get">
                            <field name="VAR" id="3lD0;=:EX{.QS(1_E}e_">variable</field>
                        </block>
                    </value>
                    <value name="FIND">
                        <shadow type="text">
                            <field name="TEXT"></field>
                        </shadow>
                    </value>
                </block>
                <block type="text_join">
                    <mutation items="2"></mutation>
                </block>
                <block type="text_getSubstring">
                    <mutation at1="true" at2="true"></mutation>
                    <field name="WHERE1">FROM_START</field>
                    <field name="WHERE2">FROM_START</field>
                    <value name="STRING">
                        <block type="variables_get">
                            <field name="VAR" id="3lD0;=:EX{.QS(1_E}e_">variable</field>
                        </block>
                    </value>
                </block>
                <block type="text_changeCase">
                    <field name="CASE">UPPERCASE</field>
                    <value name="TEXT">
                        <shadow type="text">
                            <field name="TEXT"></field>
                        </shadow>
                    </value>
                </block>
                <block type="text_trim">
                    <field name="MODE">BOTH</field>
                    <value name="TEXT">
                        <shadow type="text">
                            <field name="TEXT"></field>
                        </shadow>
                    </value>
                </block>
                <block type="text_print">
                    <value name="TEXT">
                        <shadow type="text">
                            <field name="TEXT"></field>
                        </shadow>
                    </value>
                </block>
                <block type="text_prompt_ext">
                    <mutation type="TEXT"></mutation>
                    <field name="TYPE">TEXT</field>
                    <value name="TEXT">
                        <shadow type="text">
                            <field name="TEXT"></field>
                        </shadow>
                    </value>
                </block>
                <block type=textinclude></block>
            </category>
            <category name="Lists" colour="#745CA6">
                <block type="lists_indexOf">
                    <field name="END">FIRST</field>
                    <value name="VALUE">
                        <block type="variables_get">
                            <field name="VAR" id="$nGj}F5dt?Fu8z!2-*~F">variable</field>
                        </block>
                    </value>
                </block>
                <block type="lists_create_with">
                    <mutation items="0"></mutation>
                </block>
                <block type="lists_repeat">
                    <value name="NUM">
                        <shadow type="math_number">
                            <field name="NUM">0</field>
                        </shadow>
                    </value>
                </block>
                <block type="lists_length"></block>
                <block type="lists_isEmpty"></block>
                <block type="lists_create_with">
                    <mutation items="3"></mutation>
                </block>
                <block type="lists_getIndex">
                    <mutation statement="false" at="true"></mutation>
                    <field name="MODE">GET</field>
                    <field name="WHERE">FROM_START</field>
                    <value name="VALUE">
                        <block type="variables_get">
                            <field name="VAR" id="$nGj}F5dt?Fu8z!2-*~F">variable</field>
                        </block>
                    </value>
                </block>
                <block type="lists_setIndex">
                    <mutation at="true"></mutation>
                    <field name="MODE">SET</field>
                    <field name="WHERE">FROM_START</field>
                    <value name="LIST">
                        <block type="variables_get">
                            <field name="VAR" id="$nGj}F5dt?Fu8z!2-*~F">variable</field>
                        </block>
                    </value>
                </block>
                <block type="lists_getSublist">
                    <mutation at1="true" at2="true"></mutation>
                    <field name="WHERE1">FROM_START</field>
                    <field name="WHERE2">FROM_START</field>
                    <value name="LIST">
                        <block type="variables_get">
                            <field name="VAR" id="$nGj}F5dt?Fu8z!2-*~F">variable</field>
                        </block>
                    </value>
                </block>
                <block type="lists_split">
                    <mutation mode="SPLIT"></mutation>
                    <field name="MODE">SPLIT</field>
                    <value name="DELIM">
                        <shadow type="text">
                            <field name="TEXT"></field>
                        </shadow>
                    </value>
                </block>
                <block type="lists_sort">
                    <field name="TYPE">NUMERIC</field>
                    <field name="DIRECTION">1</field>
                </block>
            </category>
            <category name="Variables" colour="330" custom="VARIABLE"></category>
            <category name="Functions" colour="290" custom="PROCEDURE"></category>
        </xml>
        <!-- 기본 div -->
        <div id="blocklyDiv">
            <div style="height:50px; display: flex; justify-content: right; align-items: center;">
                <a class="waves-effect waves-light btn modal-trigger" data-target="modal1" style="margin-right: 20px;"
                    id="copy">복사</a>
                <a class="waves-effect waves-light btn" id="finish">끝내기</a>
            </div>
            <div id="modal1" class="modal">
                <div class="modal-content">
                    <h4>Code</h4>
                    <div id="copy_code"></div>
                </div>
            </div>
            <script>
                let workspace = Blockly.inject('blocklyDiv', {
                    toolbox: document.getElementById('toolbox'), zoom:
                    {
                        controls: false,
                        wheel: true,
                        startScale: 1.0,
                        maxScale: 2,
                        minScale: 0.2,
                        scaleSpeed: 1.2,
                        pinch: true
                    },
                    trashcan: false
                });
            </script>
        </div>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/js/materialize.min.js"></script>
        <script src="https://code.jquery.com/jquery-3.6.0.js"
            integrity="sha256-H+K7U5CnXl1h5ywQfKtSj8PCmoN9aaq30gDh27Xc0jk=" crossorigin="anonymous"></script>
        <script>

            let a
            window.onload = () => {
                let bot_name = prompt("봇 이름을 입력해주세요!(똑같이 해야합니다)")
                a = bot_name
                loadWorkspace(bot_name)
            }
            function start(token) {
                var code = `const { Client, Intents } = require('discord.js');
                            const client = new Client({ intents: [Intents.FLAGS.GUILDS] });
                            const token = "${token}";
                            client.login("${token}");\n` + Blockly.JavaScript.workspaceToCode(workspace);
                console.log(code)
            }


            let finish = document.getElementById('finish')
            finish.addEventListener("click", () => {
                saveWorkspace(a)
                var code = `const { Client, Intents } = require('discord.js');
                            const client = new Client({ intents: [Intents.FLAGS.GUILDS] });
                            const token = 'OTAwMzY1Mzg0MTkwOTM1MDYw.YXAQmw.juFpP1gt_QPK_dbx3MuxU0irWi4';
                            client.login(token);\n` + Blockly.JavaScript.workspaceToCode(workspace);
                let xhr = new XMLHttpRequest()
                xhr.open("POST", "/bot/hosting_bot")
                xhr.setRequestHeader("Content-Type", "application/json")
                xhr.onreadystatechange = () => {
                    if (xhr.status === 200 && xhr.readyState === 4) {
                        console.log(JSON.parse(xhr.responseText))
                    }
                }
                xhr.send(JSON.stringify({
                    code: code
                }));
            })

            let copy = document.getElementById('copy')
            copy.addEventListener('click', () => {
                var elems = document.querySelectorAll('.modal');
                var instances = M.Modal.init(elems);

                var code = `const { Client, Intents } = require('discord.js');
        const client = new Client({ intents: [Intents.FLAGS.GUILDS] });
        const token = 'OTAwMzY1Mzg0MTkwOTM1MDYw.YXAQmw.juFpP1gt_QPK_dbx3MuxU0irWi4';
        client.login(token);\n` + Blockly.JavaScript.workspaceToCode(workspace);
                console.log(code)
                document.getElementById('copy_code').innerHTML = code
            })

        </script>
    </div>

</body>

</html>