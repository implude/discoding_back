<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Title</title>
    <!-- 실행: npm run dev -->
    <script src="https://unpkg.com/blockly/blockly.min.js"></script>
    <!--이벤트,동작-->
    <script>

        Blockly.Blocks['discord_edit'] = {
            init: function () {
                this.appendValueInput("message")
                    .setCheck("Msg")
                    .appendField("메시지:");
                this.appendValueInput("edit")
                    .setCheck("String")
                    .appendField("를");
                this.appendDummyInput()
                    .appendField("로 수정하기");
                this.setInputsInline(true);
                this.setPreviousStatement(true, null);
                this.setNextStatement(true, null);
                this.setColour(240);
                this.setTooltip("");
                this.setHelpUrl("");
            }
        };
        Blockly.JavaScript['discord_edit'] = function (block) {
            var value_message = Blockly.JavaScript.valueToCode(block, 'message', Blockly.JavaScript.ORDER_ATOMIC);
            var value_edit = Blockly.JavaScript.valueToCode(block, 'edit', Blockly.JavaScript.ORDER_ATOMIC);
            // TODO: Assemble JavaScript into code variable.
            var code = `${value_message}.edit(${value_edit})\n`;
            return code;
        };
        Blockly.Blocks['discord_delete'] = {
            init: function () {
                this.appendValueInput("message")
                    .setCheck("Msg")
                    .appendField("메시지:");
                this.appendDummyInput()
                    .appendField("삭제하기");
                this.setInputsInline(true);
                this.setPreviousStatement(true, null);
                this.setNextStatement(true, null);
                this.setColour(240);
                this.setTooltip("");
                this.setHelpUrl("");
            }
        };
        Blockly.JavaScript['discord_delete'] = function (block) {
            var value_message = Blockly.JavaScript.valueToCode(block, 'message', Blockly.JavaScript.ORDER_ATOMIC);
            // TODO: Assemble JavaScript into code variable.
            var code = `${value_message}.delete()\n`;
            return code;
        };
        Blockly.Blocks['discord_send'] = {
            init: function () {
                this.appendDummyInput()
                    .appendField("채널:");
                this.appendValueInput("channel")
                    .setCheck("Channel");
                this.appendDummyInput()
                    .appendField("에 텍스트:");
                this.appendValueInput("message")
                    .setCheck("String");
                this.appendDummyInput()
                    .appendField("보내기");
                this.setInputsInline(true);
                this.setPreviousStatement(true, null);
                this.setNextStatement(true, null);
                this.setColour(240);
                this.setTooltip("");
                this.setHelpUrl("");
            }
        };
        Blockly.JavaScript['discord_send'] = function (block) {
            var value_channel = Blockly.JavaScript.valueToCode(block, 'channel', Blockly.JavaScript.ORDER_ATOMIC);
            var value_message = Blockly.JavaScript.valueToCode(block, 'message', Blockly.JavaScript.ORDER_ATOMIC);
            // TODO: Assemble JavaScript into code variable.
            var code = `client.channels.cache.get(${value_channel}.id).send(${value_message})`;
            return code;
        };

        Blockly.Blocks['event_message'] = {
            init: function () {
                this.appendDummyInput()
                    .appendField("메시지가 수신되었을 때");
                this.appendDummyInput()
                    .appendField("메시지 변수 :")
                    .appendField(new Blockly.FieldVariable("message"), "NAME");
                this.appendStatementInput("NAME")
                    .setCheck("");
                this.setColour(240);
                this.setTooltip("");
                this.setHelpUrl("");
            }
        };
        Blockly.JavaScript['event_message'] = function (block) {
            var variable_name = Blockly.JavaScript.nameDB_.getName(block.getFieldValue('NAME'), Blockly.Variables.NAME_TYPE);
            var statements_name = Blockly.JavaScript.statementToCode(block, 'NAME');
            // TODO: Assemble JavaScript into code variable.
            var code = `client.on('message', (message) => {
    ${variable_name} = message
    ${statements_name}
    })\n`
            return code;
        };

        Blockly.Blocks['event_ready'] = {
            init: function () {
                this.appendDummyInput()
                    .appendField("봇 연결에 성공했을 때");
                this.appendStatementInput("NAME")
                    .setCheck(null);
                this.setColour(240);
                this.setTooltip("");
                this.setHelpUrl("");
            }
        };
        Blockly.JavaScript['event_ready'] = function (block) {
            var statements_name = Blockly.JavaScript.statementToCode(block, 'NAME');
            // TODO: Assemble JavaScript into code variable.
            var code = `client.on('ready', () => {
    ${statements_name}
    })\n`
            return code;
        };

        Blockly.Blocks['event_memin'] = {
            init: function () {
                this.appendDummyInput()
                    .appendField("멤버가 들어왔을 때");
                this.appendDummyInput()
                    .appendField("멤버 변수 :")
                    .appendField(new Blockly.FieldVariable("memberin"), "NAME");
                this.appendStatementInput("NAME")
                    .setCheck(null);
                this.setColour(240);
                this.setTooltip("");
                this.setHelpUrl("");
            }
        };
        Blockly.JavaScript['event_memin'] = function (block) {
            var statements_name = Blockly.JavaScript.statementToCode(block, 'NAME');
            // TODO: Assemble JavaScript into code variable.
            var code = `client.on('guildMemberAdd', memberin => {
    ${statements_name}
    })\n`
            return code;
        };

        Blockly.Blocks['event_memout'] = {
            init: function () {
                this.appendDummyInput()
                    .appendField("멤버가 들어왔을 때");
                this.appendDummyInput()
                    .appendField("멤버 변수 :")
                    .appendField(new Blockly.FieldVariable("memberout"), "NAME");
                this.appendStatementInput("NAME")
                    .setCheck(null);
                this.setColour(240);
                this.setTooltip("");
                this.setHelpUrl("");
            }
        };
        Blockly.JavaScript['event_memout'] = function (block) {
            var statements_name = Blockly.JavaScript.statementToCode(block, 'NAME');
            // TODO: Assemble JavaScript into code variable.
            var code = `client.on('guildMemberAdd', memberout => {
    ${statements_name}
    })\n`
            return code;
        };

    </script>
    <!--값-->
    <script>
        Blockly.Blocks['prop_user'] = {
            init: function () {
                this.appendDummyInput()
                    .appendField(new Blockly.FieldDropdown([["ID가", "id"], ["메시지", "msg"]]), "select");
                this.appendValueInput("value")
                    .setCheck(["String", "Msg"]);
                this.appendDummyInput()
                    .appendField(new Blockly.FieldLabelSerializable("유저"), "dyn_user")
                this.setInputsInline(true);
                this.setOutput(true, "User");
                this.setColour(230);
                this.setTooltip("");
                this.setHelpUrl("");
            }
        };
        Blockly.JavaScript['prop_user'] = function (block) {
            var dropdown_select = block.getFieldValue('select');
            var value_value = Blockly.JavaScript.valueToCode(block, 'value', Blockly.JavaScript.ORDER_ATOMIC);
            // TODO: Assemble JavaScript into code variable.
            if (dropdown_select == 'id') {
                var code = `client.users.fetch(${value_value})`;
                block.setFieldValue('를 가진 유저', 'dyn_user')
            }
            if (dropdown_select == 'msg') {
                var code = `message.channel.messages.fetch(${value_value})`;
                block.setFieldValue('를 가진 메시지', 'dyn_user')
            }
            // TODO: Change ORDER_NONE to the correct strength.
            return [code, Blockly.JavaScript.ORDER_NONE];
        };
        Blockly.Blocks['prop_id'] = {
            init: function () {
                this.appendDummyInput()
                    .appendField(new Blockly.FieldDropdown([["메시지", "msg"], ["사용자", "user"]]), "select");
                this.appendValueInput("value")
                    .setCheck(["User", "Message"]);
                this.appendDummyInput()
                    .appendField(new Blockly.FieldLabelSerializable("아이디"), "dyn_id")
                this.setInputsInline(true);
                this.setOutput(true, "String");
                this.setColour(230);
                this.setTooltip("");
                this.setHelpUrl("");
            }
        };
        Blockly.JavaScript['prop_id'] = function (block) {
            var dropdown_select = block.getFieldValue('select');
            var value_value = Blockly.JavaScript.valueToCode(block, 'value', Blockly.JavaScript.ORDER_ATOMIC);
            // TODO: Assemble JavaScript into code variable.
            if (dropdown_select == 'msg') {
                var code = `${value_value}.id`;
                block.setFieldValue('의 ID', 'dyn_id')
            }
            if (dropdown_select == 'user') {
                var code = `${value_value}.id`;
                block.setFieldValue('의 ID', 'dyn_id')
            }
            return [code, Blockly.JavaScript.ORDER_NONE];
        };
        Blockly.Blocks['prop_content'] = {
            init: function () {
                this.appendDummyInput()
                    .appendField(new Blockly.FieldDropdown([["메시지", "msg"], ["사용자", "user"]]), "select");
                this.appendValueInput("value")
                    .setCheck(["Msg", "User"]);
                this.appendDummyInput()
                    .appendField(new Blockly.FieldLabelSerializable("내용"), 'dyn_content');
                this.setInputsInline(true);
                this.setOutput(true, "String");
                this.setColour(230);
                this.setTooltip("");
                this.setHelpUrl("");
            }
        };
        Blockly.JavaScript['prop_content'] = function (block) {
            var dropdown_select = block.getFieldValue('select');
            var value_value = Blockly.JavaScript.valueToCode(block, 'value', Blockly.JavaScript.ORDER_ATOMIC);
            // TODO: Assemble JavaScript into code variable.
            if (dropdown_select == 'msg') {
                var code = `${value_value}.content`;
                block.setFieldValue('의 내용', 'dyn_content')
            }
            if (dropdown_select == 'user') {
                var code = `${value_value}.username`;
                block.setFieldValue('의 닉네임', 'dyn_content')
            }
            // TODO: Change ORDER_NONE to the correct strength.
            return [code, Blockly.JavaScript.ORDER_NONE];
        };
        Blockly.Blocks['prop_channel'] = {
            init: function () {
                this.appendDummyInput()
                    .appendField(new Blockly.FieldDropdown([["메시지", "msg"], ["아이디", "id"]]), "select");
                this.appendValueInput("value")
                    .setCheck(["Msg", "String"]);
                this.appendDummyInput()
                    .appendField(new Blockly.FieldLabelSerializable("채널"), "dyn_channel");
                this.setInputsInline(true);
                this.setOutput(true, "Channel");
                this.setColour(230);
                this.setTooltip("");
                this.setHelpUrl("");
            }
        };
        Blockly.JavaScript['prop_channel'] = function (block) {
            var dropdown_select = block.getFieldValue('select');
            var value_value = Blockly.JavaScript.valueToCode(block, 'value', Blockly.JavaScript.ORDER_ATOMIC);
            // TODO: Assemble JavaScript into code variable.
            if (dropdown_select == 'id') {
                var code = `${value_value}.id`;
                block.setFieldValue('를 가진 채널', 'dyn_channel')
            }
            if (dropdown_select == 'msg') {
                var code = `${value_value}.id`;
                block.setFieldValue('를 받은 채널', 'dyn_channel')
            }
            return [code, Blockly.JavaScript.ORDER_NONE];
        };
        Blockly.Blocks['prop_msg'] = {
            init: function () {
                this.appendDummyInput()
                    .appendField("채널");
                this.appendValueInput("value")
                    .setCheck("Channel");
                this.appendDummyInput()
                    .appendField(new Blockly.FieldDropdown([["에서 아이디", "id"], ["에서 아래서", "fromdown"]]), "value");
                this.appendValueInput("value2")
                    .setCheck(["String", "Number"]);
                this.appendDummyInput()
                    .appendField(new Blockly.FieldLabelSerializable("를 가진 메시지"), "dyn_msg");
                this.setInputsInline(true);
                this.setOutput(true, "Msg");
                this.setColour(230);
                this.setTooltip("");
                this.setHelpUrl("");
            }
        };
        Blockly.JavaScript['prop_msg'] = function (block) {
            var value_value = Blockly.JavaScript.valueToCode(block, 'value', Blockly.JavaScript.ORDER_ATOMIC);
            var dropdown_select = block.getFieldValue('value');
            var value_value2 = Blockly.JavaScript.valueToCode(block, 'value2', Blockly.JavaScript.ORDER_ATOMIC);
            // TODO: Assemble JavaScript into code variable.
            var code = '...';
            if (dropdown_select == 'id') {
                var code = `${value_value}.messages.fetch(${value_value2})`;
                block.setFieldValue('를 가진 메시지', 'dyn_msg')
            }
            if (dropdown_select == 'fromdown') {
                var code = `await ${value_value}.messages.fetch({ limit: ${value_value2} }).last()`;
                block.setFieldValue('번째 메시지', 'dyn_msg')
            }
            // TODO: Change ORDER_NONE to the correct strength.
            return [code, Blockly.JavaScript.ORDER_NONE];
        };
    </script>
    <style>
        body {
            margin: 0;
            padding: 0;
            height: 100vh;
            width: 100%;
        }

        .main {
            width: 100%;
            height: 100%;
        }

        .middle {
            height: 100%;
            width: 100%;
        }

        #blocklyDiv {
            width: 80%;
            height: 100%;
            float: left;
        }

        #codeDiv {
            width: 20%;
            height: 100%;
            float: right;
            background: #000000
        }

        path {
            bottom: 0;
            height: 50%;

        }
    </style>
</head>

<body>
    <script>
        function saveWorkspace() {
            var xmlDom = Blockly.Xml.workspaceToDom(Blockly.mainWorkspace);
            var xmlText = Blockly.Xml.domToPrettyText(xmlDom);

            localStorage.setItem("blockly.xml", xmlText);
        }

        function loadWorkspace() {
            var xmlText = localStorage.getItem("blockly.xml");
            if (xmlText) {
                Blockly.mainWorkspace.clear();
                xmlDom = Blockly.Xml.textToDom(xmlText);
                Blockly.Xml.domToWorkspace(Blockly.mainWorkspace, xmlDom);
            }
        }
    </script>
    <div class="main">
        <!-- 툴 박스 -->
        <xml id="toolbox" style="display: none">
            <category name="Event" colour="220" categorystyle="hat">
                <block type="event_message"></block>
                <block type="event_ready"></block>
                <block type="event_memin"></block>
                <block type="event_memout"></block>
            </category>
            <category name="Act" colour="220">
                <block type="discord_send"></block>
                <block type="discord_edit"></block>
                <block type="discord_delete"></block>
            </category>
            <category name="Properties" colour="220">
                <block type="prop_user"></block>
                <block type="prop_id"></block>
                <block type="prop_content"></block>
                <block type="prop_channel"></block>
                <block type="prop_msg"></block>
            </category>
            <sep></sep>
            <category name="Logic" colour="180">
                <block type="controls_if"></block>
                <block type="logic_compare"></block>
                <block type="logic_operation"></block>
                <block type="logic_negate"></block>
                <block type="logic_boolean"></block>
                <block type="logic_null"></block>
            </category>

            <category name="Loops" colour="60">
                <block type="controls_repeat_ext"></block>
                <block type="controls_whileUntil"></block>
                <block type="controls_flow_statements"></block>
            </category>

            <category name="Math" colour="300">
                <block type="math_number"></block>
                <block type="math_arithmetic"></block>
                <block type="math_single"></block>
                <block type="math_trig"></block>
                <block type="math_constant"></block>
                <block type="math_number_property"></block>
                <block type="math_round"></block>
                <block type="math_on_list"></block>
                <block type="math_modulo"></block>
                <block type="math_constrain"></block>
                <block type="math_random_int"></block>
                <block type="math_random_float"></block>
            </category>

            <category name="Text" colour="160">
                <block type="text"></block>
                <block type="startswith"></block>
                <block type="text_join"></block>
                <block type="text_append"></block>
                <block type="text_length"></block>
                <block type="text_isEmpty"></block>
                <block type="text_indexOf"></block>
                <block type="text_charAt"></block>
                <block type="text_getSubstring"></block>
                <block type="text_changeCase"></block>
                <block type="text_trim"></block>
                <block type="text_print"></block>
                <block type="text_prompt_ext"></block>
            </category>

            <category name="Lists" colour="260">
                <block type="lists_create_with">
                    <mutation items="0"></mutation> <!-- 이게뭐람 -->
                </block>
                <block type="lists_create_with"></block>
                <block type="lists_repeat"></block>
                <block type="lists_length"></block>
                <block type="lists_isEmpty"></block>
                <block type="lists_indexOf"></block>
                <block type="lists_getIndex"></block>
                <block type="lists_setIndex"> </block>
                <block type="lists_getSublist"></block>
                <block type="lists_split"></block>
                <block type="lists_sort"></block>
            </category>
            <category name="Variables" colour="330" custom="VARIABLE"></category>
            <category name="Functions" colour="290" custom="PROCEDURE"></category>
        </xml>
        <!-- 기본 div -->
        <div id="blocklyDiv">
            <script>
                let workspace = Blockly.inject('blocklyDiv', {
                    toolbox: document.getElementById('toolbox'), zoom:
                    {
                        controls: false,
                        wheel: true,
                        startScale: 1.0,
                        maxScale: 2,
                        minScale: 0.2,
                        scaleSpeed: 1.2,
                        pinch: true
                    },
                    trashcan: false
                });
                loadWorkspace()
                workspace.addChangeListener(saveWorkspace);
            </script>
        </div>
        <button onclick="Copytest()">Copy text</button>
        <div id="codeDiv">
            <script>
                document.write("code here".fontcolor("white"))
                var code = Blockly.JavaScript.workspaceToCode(workspace);
                function livecodegen() {
                    var code = `const { Client, Intents } = require('discord.js');
                const client = new Client({ intents: [Intents.FLAGS.GUILDS] });
                const token = 'OTAwMzY1Mzg0MTkwOTM1MDYw.YXAQmw.Yw3XfL5WHr_fO9SRpUDwk5_vaVQ'
                client.login(token);\n` + Blockly.JavaScript.workspaceToCode(workspace);
                    document.getElementById("codeDiv").innerHTML = code.replaceAll("\n", "<br>").fontcolor("white")
                };
                workspace.addChangeListener(livecodegen);
                function Copytest() {
                    navigator.clipboard.writeText(Blockly.JavaScript.workspaceToCode(workspace));
                }

            </script>
        </div>
    </div>

    <script>

    </script>
</body>

</html>
