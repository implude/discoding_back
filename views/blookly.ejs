<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Title</title>
    <!-- 실행: npm run dev -->
    <script src="https://unpkg.com/blockly/blockly.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css">
    <!--이벤트,동작-->
    <script>

        Blockly.Blocks['discord_edit'] = {
            init: function () {
                this.appendValueInput("message")
                    .setCheck("Msg")
                    .appendField("메시지:");
                this.appendValueInput("edit")
                    .setCheck("String")
                    .appendField("를");
                this.appendDummyInput()
                    .appendField("로 수정하기");
                this.setInputsInline(true);
                this.setPreviousStatement(true, null);
                this.setNextStatement(true, null);
                this.setColour(240);
                this.setTooltip("");
                this.setHelpUrl("");
            }
        };
        Blockly.JavaScript['discord_edit'] = function (block) {
            var value_message = Blockly.JavaScript.valueToCode(block, 'message', Blockly.JavaScript.ORDER_ATOMIC);
            var value_edit = Blockly.JavaScript.valueToCode(block, 'edit', Blockly.JavaScript.ORDER_ATOMIC);
            // TODO: Assemble JavaScript into code variable.
            var code = `${value_message}.edit(${value_edit})\n`;
            return code;
        };
        Blockly.Blocks['discord_delete'] = {
            init: function () {
                this.appendValueInput("message")
                    .setCheck("Msg")
                    .appendField("메시지:");
                this.appendDummyInput()
                    .appendField("삭제하기");
                this.setInputsInline(true);
                this.setPreviousStatement(true, null);
                this.setNextStatement(true, null);
                this.setColour(240);
                this.setTooltip("");
                this.setHelpUrl("");
            }
        };
        Blockly.JavaScript['discord_delete'] = function (block) {
            var value_message = Blockly.JavaScript.valueToCode(block, 'message', Blockly.JavaScript.ORDER_ATOMIC);
            // TODO: Assemble JavaScript into code variable.
            var code = `${value_message}.delete()\n`;
            return code;
        };
        Blockly.Blocks['discord_send'] = {
            init: function () {
                this.appendDummyInput()
                    .appendField("채널:");
                this.appendValueInput("channel")
                    .setCheck("Channel");
                this.appendDummyInput()
                    .appendField("에 텍스트:");
                this.appendValueInput("message")
                    .setCheck("String");
                this.appendDummyInput()
                    .appendField("보내기");
                this.setInputsInline(true);
                this.setPreviousStatement(true, null);
                this.setNextStatement(true, null);
                this.setColour(240);
                this.setTooltip("");
                this.setHelpUrl("");
            }
        };
        Blockly.JavaScript['discord_send'] = function (block) {
            var value_channel = Blockly.JavaScript.valueToCode(block, 'channel', Blockly.JavaScript.ORDER_ATOMIC);

            var value_message = Blockly.JavaScript.valueToCode(block, 'message', Blockly.JavaScript.ORDER_ATOMIC);
            // TODO: Assemble JavaScript into code variable.
            var code = `client.channels.cache.get("${value_channel.split("'")[1]}").send(${value_message})`;
            return code; 0
        };

        Blockly.Blocks['event_message'] = {
            init: function () {
                this.appendDummyInput()
                    .appendField("메시지가 수신되었을 때");
                this.appendDummyInput()
                    .appendField("메시지 변수 :")
                    .appendField(new Blockly.FieldVariable("message"), "NAME");
                this.appendStatementInput("NAME")
                    .setCheck("");
                this.setColour(240);
                this.setTooltip("");
                this.setHelpUrl("");
            }
        };
        Blockly.JavaScript['event_message'] = function (block) {
            var variable_name = Blockly.JavaScript.nameDB_.getName(block.getFieldValue('NAME'), Blockly.Variables.NAME_TYPE);
            var statements_name = Blockly.JavaScript.statementToCode(block, 'NAME');
            // TODO: Assemble JavaScript into code variable.
            var code = `client.on('message', (message) => {
    ${variable_name} = message
    ${statements_name}
    })\n`
            return code;
        };

        Blockly.Blocks['event_ready'] = {
            init: function () {
                this.appendDummyInput()
                    .appendField("봇 연결에 성공했을 때");
                this.appendStatementInput("NAME")
                    .setCheck(null);
                this.setColour(240);
                this.setTooltip("");
                this.setHelpUrl("");
            }
        };
        Blockly.JavaScript['event_ready'] = function (block) {
            var statements_name = Blockly.JavaScript.statementToCode(block, 'NAME');
            // TODO: Assemble JavaScript into code variable.
            var code = `client.on('ready', () => {
    ${statements_name}
    })\n`
            return code;
        };

        Blockly.Blocks['event_memin'] = {
            init: function () {
                this.appendDummyInput()
                    .appendField("멤버가 들어왔을 때");
                this.appendDummyInput()
                    .appendField("멤버 변수 :")
                    .appendField(new Blockly.FieldVariable("memberin"), "NAME");
                this.appendStatementInput("NAME")
                    .setCheck(null);
                this.setColour(240);
                this.setTooltip("");
                this.setHelpUrl("");
            }
        };
        Blockly.JavaScript['event_memin'] = function (block) {
            var statements_name = Blockly.JavaScript.statementToCode(block, 'NAME');
            // TODO: Assemble JavaScript into code variable.
            var code = `client.on('guildMemberAdd', memberin => {
    ${statements_name}
    })\n`
            return code;
        };

        Blockly.Blocks['event_memout'] = {
            init: function () {
                this.appendDummyInput()
                    .appendField("멤버가 들어왔을 때");
                this.appendDummyInput()
                    .appendField("멤버 변수 :")
                    .appendField(new Blockly.FieldVariable("memberout"), "NAME");
                this.appendStatementInput("NAME")
                    .setCheck(null);
                this.setColour(240);
                this.setTooltip("");
                this.setHelpUrl("");
            }
        };
        Blockly.JavaScript['event_memout'] = function (block) {
            var statements_name = Blockly.JavaScript.statementToCode(block, 'NAME');
            // TODO: Assemble JavaScript into code variable.
            var code = `client.on('guildMemberAdd', memberout => {
    ${statements_name}
    })\n`
            return code;
        };

    </script>
    <!--값-->
    <script>
        Blockly.Blocks['prop_user'] = {
            init: function () {
                this.appendDummyInput()
                    .appendField(new Blockly.FieldDropdown([["ID가", "id"], ["메시지", "msg"]]), "select");
                this.appendValueInput("value")
                    .setCheck(["String", "Msg"]);
                this.appendDummyInput()
                    .appendField(new Blockly.FieldLabelSerializable("유저"), "dyn_user")
                this.setInputsInline(true);
                this.setOutput(true, "User");
                this.setColour(230);
                this.setTooltip("");
                this.setHelpUrl("");
            }
        };
        Blockly.JavaScript['prop_user'] = function (block) {
            var dropdown_select = block.getFieldValue('select');
            var value_value = Blockly.JavaScript.valueToCode(block, 'value', Blockly.JavaScript.ORDER_ATOMIC);
            // TODO: Assemble JavaScript into code variable.
            if (dropdown_select == 'id') {
                var code = `client.users.fetch(${value_value})`;
                block.setFieldValue('를 가진 유저', 'dyn_user')
            }
            if (dropdown_select == 'msg') {
                var code = `message.channel.messages.fetch(${value_value})`;
                block.setFieldValue('를 가진 메시지', 'dyn_user')
            }
            // TODO: Change ORDER_NONE to the correct strength.
            return [code, Blockly.JavaScript.ORDER_NONE];
        };
        Blockly.Blocks['prop_id'] = {
            init: function () {
                this.appendDummyInput()
                    .appendField(new Blockly.FieldDropdown([["메시지", "msg"], ["사용자", "user"]]), "select");
                this.appendValueInput("value")
                    .setCheck(["User", "Message"]);
                this.appendDummyInput()
                    .appendField(new Blockly.FieldLabelSerializable("아이디"), "dyn_id")
                this.setInputsInline(true);
                this.setOutput(true, "String");
                this.setColour(230);
                this.setTooltip("");
                this.setHelpUrl("");
            }
        };
        Blockly.JavaScript['prop_id'] = function (block) {
            var dropdown_select = block.getFieldValue('select');
            var value_value = Blockly.JavaScript.valueToCode(block, 'value', Blockly.JavaScript.ORDER_ATOMIC);
            // TODO: Assemble JavaScript into code variable.
            if (dropdown_select == 'msg') {
                var code = `${value_value}.id`;
                block.setFieldValue('의 ID', 'dyn_id')
            }
            if (dropdown_select == 'user') {
                var code = `${value_value}.id`;
                block.setFieldValue('의 ID', 'dyn_id')
            }
            return [code, Blockly.JavaScript.ORDER_NONE];
        };
        Blockly.Blocks['prop_content'] = {
            init: function () {
                this.appendDummyInput()
                    .appendField(new Blockly.FieldDropdown([["메시지", "msg"], ["사용자", "user"]]), "select");
                this.appendValueInput("value")
                    .setCheck(["Msg", "User"]);
                this.appendDummyInput()
                    .appendField(new Blockly.FieldLabelSerializable("내용"), 'dyn_content');
                this.setInputsInline(true);
                this.setOutput(true, "String");
                this.setColour(230);
                this.setTooltip("");
                this.setHelpUrl("");
            }
        };
        Blockly.JavaScript['prop_content'] = function (block) {
            var dropdown_select = block.getFieldValue('select');
            var value_value = Blockly.JavaScript.valueToCode(block, 'value', Blockly.JavaScript.ORDER_ATOMIC);
            // TODO: Assemble JavaScript into code variable.
            if (dropdown_select == 'msg') {
                var code = `${value_value}.content`;
                block.setFieldValue('의 내용', 'dyn_content')
            }
            if (dropdown_select == 'user') {
                var code = `${value_value}.username`;
                block.setFieldValue('의 닉네임', 'dyn_content')
            }
            // TODO: Change ORDER_NONE to the correct strength.
            return [code, Blockly.JavaScript.ORDER_NONE];
        };
        Blockly.Blocks['prop_channel'] = {
            init: function () {
                this.appendDummyInput()
                    .appendField(new Blockly.FieldDropdown([["메시지", "msg"], ["아이디", "id"]]), "select");
                this.appendValueInput("value")
                    .setCheck(["Msg", "String"]);
                this.appendDummyInput()
                    .appendField(new Blockly.FieldLabelSerializable("채널"), "dyn_channel");
                this.setInputsInline(true);
                this.setOutput(true, "Channel");
                this.setColour(230);
                this.setTooltip("");
                this.setHelpUrl("");
            }
        };
        Blockly.JavaScript['prop_channel'] = function (block) {
            var dropdown_select = block.getFieldValue('select');
            var value_value = Blockly.JavaScript.valueToCode(block, 'value', Blockly.JavaScript.ORDER_ATOMIC);
            // TODO: Assemble JavaScript into code variable.
            if (dropdown_select == 'id') {
                var code = `${value_value}.id`;
                block.setFieldValue('를 가진 채널', 'dyn_channel')
            }
            if (dropdown_select == 'msg') {
                var code = `${value_value}.id`;
                block.setFieldValue('를 받은 채널', 'dyn_channel')
            }
            return [code, Blockly.JavaScript.ORDER_NONE];
        };
        Blockly.Blocks['prop_msg'] = {
            init: function () {
                this.appendDummyInput()
                    .appendField("채널");
                this.appendValueInput("value")
                    .setCheck("Channel");
                this.appendDummyInput()
                    .appendField(new Blockly.FieldDropdown([["에서 아이디", "id"], ["에서 아래서", "fromdown"]]), "value");
                this.appendValueInput("value2")
                    .setCheck(["String", "Number"]);
                this.appendDummyInput()
                    .appendField(new Blockly.FieldLabelSerializable("를 가진 메시지"), "dyn_msg");
                this.setInputsInline(true);
                this.setOutput(true, "Msg");
                this.setColour(230);
                this.setTooltip("");
                this.setHelpUrl("");
            }
        };
        Blockly.JavaScript['prop_msg'] = function (block) {
            var value_value = Blockly.JavaScript.valueToCode(block, 'value', Blockly.JavaScript.ORDER_ATOMIC);
            var dropdown_select = block.getFieldValue('value');
            var value_value2 = Blockly.JavaScript.valueToCode(block, 'value2', Blockly.JavaScript.ORDER_ATOMIC);
            // TODO: Assemble JavaScript into code variable.
            var code = '...';
            if (dropdown_select == 'id') {
                var code = `${value_value}.messages.fetch(${value_value2})`;
                block.setFieldValue('를 가진 메시지', 'dyn_msg')
            }
            if (dropdown_select == 'fromdown') {
                var code = `await ${value_value}.messages.fetch({ limit: ${value_value2} }).last()`;
                block.setFieldValue('번째 메시지', 'dyn_msg')
            }
            // TODO: Change ORDER_NONE to the correct strength.
            return [code, Blockly.JavaScript.ORDER_NONE];
        };
    </script>

    <script>
        Blockly.Msg["ADD_COMMENT"] = "Add Comment";
        Blockly.Msg["CANNOT_DELETE_VARIABLE_PROCEDURE"] = "Can't delete the variable '%1' because it's part of the definition of the function '%2'";
        Blockly.Msg["CHANGE_VALUE_TITLE"] = "Change value:";
        Blockly.Msg["CLEAN_UP"] = "Clean up Blocks";
        Blockly.Msg["COLLAPSED_WARNINGS_WARNING"] = "Collapsed blocks contain warnings.";
        Blockly.Msg["COLLAPSE_ALL"] = "Collapse Blocks";
        Blockly.Msg["COLLAPSE_BLOCK"] = "Collapse Block";

        Blockly.Msg["CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK"] = "break out of loop";
        Blockly.Msg["CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE"] = "continue with next iteration of loop";
        Blockly.Msg["CONTROLS_FLOW_STATEMENTS_WARNING"] = "Warning: This block may only be used within a loop.";
        Blockly.Msg["CONTROLS_FOREACH_TITLE"] = "for each item %1 in list %2";
        Blockly.Msg["CONTROLS_FOR_TITLE"] = "count with %1 from %2 to %3 by %4";
        Blockly.Msg["CONTROLS_IF_MSG_ELSE"] = "else";
        Blockly.Msg["CONTROLS_IF_MSG_ELSEIF"] = "else if";
        Blockly.Msg["CONTROLS_IF_MSG_IF"] = "if";
        Blockly.Msg["CONTROLS_REPEAT_INPUT_DO"] = "do";
        Blockly.Msg["CONTROLS_REPEAT_TITLE"] = "repeat %1 times";
        Blockly.Msg["CONTROLS_WHILEUNTIL_OPERATOR_UNTIL"] = "repeat until";
        Blockly.Msg["CONTROLS_WHILEUNTIL_OPERATOR_WHILE"] = "repeat while";
        Blockly.Msg["DELETE_ALL_BLOCKS"] = "Delete all %1 blocks?";
        Blockly.Msg["DELETE_BLOCK"] = "Delete Block";
        Blockly.Msg["DELETE_VARIABLE"] = "Delete the '%1' variable";
        Blockly.Msg["DELETE_VARIABLE_CONFIRMATION"] = "Delete %1 uses of the '%2' variable?";
        Blockly.Msg["DELETE_X_BLOCKS"] = "Delete %1 Blocks";
        Blockly.Msg["DISABLE_BLOCK"] = "Disable Block";
        Blockly.Msg["DUPLICATE_BLOCK"] = "Duplicate";
        Blockly.Msg["DUPLICATE_COMMENT"] = "Duplicate Comment";
        Blockly.Msg["ENABLE_BLOCK"] = "Enable Block";
        Blockly.Msg["EXPAND_ALL"] = "Expand Blocks";
        Blockly.Msg["EXPAND_BLOCK"] = "Expand Block";
        Blockly.Msg["EXTERNAL_INPUTS"] = "External Inputs";
        Blockly.Msg["HELP"] = "Help";
        Blockly.Msg["INLINE_INPUTS"] = "Inline Inputs";
        Blockly.Msg["IOS_CANCEL"] = "Cancel";
        Blockly.Msg["IOS_ERROR"] = "Error";
        Blockly.Msg["IOS_OK"] = "OK";
        Blockly.Msg["IOS_PROCEDURES_ADD_INPUT"] = "+ Add Input";
        Blockly.Msg["IOS_PROCEDURES_ALLOW_STATEMENTS"] = "Allow statements";
        Blockly.Msg["IOS_PROCEDURES_DUPLICATE_INPUTS_ERROR"] = "This function has duplicate inputs.";
        Blockly.Msg["IOS_PROCEDURES_INPUTS"] = "INPUTS";
        Blockly.Msg["IOS_VARIABLES_ADD_BUTTON"] = "Add";
        Blockly.Msg["IOS_VARIABLES_ADD_VARIABLE"] = "+ Add Variable";
        Blockly.Msg["IOS_VARIABLES_DELETE_BUTTON"] = "Delete";
        Blockly.Msg["IOS_VARIABLES_EMPTY_NAME_ERROR"] = "You can't use an empty variable name.";
        Blockly.Msg["IOS_VARIABLES_RENAME_BUTTON"] = "Rename";
        Blockly.Msg["IOS_VARIABLES_VARIABLE_NAME"] = "Variable name";
        Blockly.Msg["LISTS_CREATE_EMPTY_TITLE"] = "create empty list";
        Blockly.Msg["LISTS_CREATE_WITH_CONTAINER_TITLE_ADD"] = "list";
        Blockly.Msg["LISTS_CREATE_WITH_INPUT_WITH"] = "create list with";
        Blockly.Msg["LISTS_GET_INDEX_FIRST"] = "first";
        Blockly.Msg["LISTS_GET_INDEX_FROM_END"] = "# from end";
        Blockly.Msg["LISTS_GET_INDEX_FROM_START"] = "#";
        Blockly.Msg["LISTS_GET_INDEX_GET"] = "get";
        Blockly.Msg["LISTS_GET_INDEX_GET_REMOVE"] = "get and remove";
        Blockly.Msg["LISTS_GET_INDEX_LAST"] = "last";
        Blockly.Msg["LISTS_GET_INDEX_RANDOM"] = "random";
        Blockly.Msg["LISTS_GET_INDEX_REMOVE"] = "remove";
        Blockly.Msg["LISTS_GET_INDEX_TAIL"] = "";
        Blockly.Msg["LISTS_GET_SUBLIST_END_FROM_END"] = "to # from end";
        Blockly.Msg["LISTS_GET_SUBLIST_END_FROM_START"] = "to #";
        Blockly.Msg["LISTS_GET_SUBLIST_END_LAST"] = "to last";
        Blockly.Msg["LISTS_GET_SUBLIST_START_FIRST"] = "get sub-list from first";
        Blockly.Msg["LISTS_GET_SUBLIST_START_FROM_END"] = "get sub-list from # from end";
        Blockly.Msg["LISTS_GET_SUBLIST_START_FROM_START"] = "get sub-list from #";
        Blockly.Msg["LISTS_GET_SUBLIST_TAIL"] = "";
        Blockly.Msg["LISTS_INDEX_OF_FIRST"] = "find first occurrence of item";
        Blockly.Msg["LISTS_INDEX_OF_LAST"] = "find last occurrence of item";
        Blockly.Msg["LISTS_INLIST"] = "in list";
        Blockly.Msg["LISTS_ISEMPTY_TITLE"] = "%1 is empty";
        Blockly.Msg["LISTS_LENGTH_TITLE"] = "length of %1";
        Blockly.Msg["LISTS_REPEAT_TITLE"] = "create list with item %1 repeated %2 times";
        Blockly.Msg["LISTS_REVERSE_MESSAGE0"] = "reverse %1";
        Blockly.Msg["LISTS_SET_INDEX_INPUT_TO"] = "as";
        Blockly.Msg["LISTS_SET_INDEX_INSERT"] = "insert at";
        Blockly.Msg["LISTS_SET_INDEX_SET"] = "set";
        Blockly.Msg["LISTS_SORT_ORDER_ASCENDING"] = "ascending";
        Blockly.Msg["LISTS_SORT_ORDER_DESCENDING"] = "descending";
        Blockly.Msg["LISTS_SORT_TITLE"] = "sort %1 %2 %3";
        Blockly.Msg["LISTS_SORT_TYPE_IGNORECASE"] = "alphabetic, ignore case";
        Blockly.Msg["LISTS_SORT_TYPE_NUMERIC"] = "numeric";
        Blockly.Msg["LISTS_SORT_TYPE_TEXT"] = "alphabetic";
        Blockly.Msg["LISTS_SPLIT_LIST_FROM_TEXT"] = "make list from text";
        Blockly.Msg["LISTS_SPLIT_TEXT_FROM_LIST"] = "make text from list";
        Blockly.Msg["LISTS_SPLIT_WITH_DELIMITER"] = "with delimiter";
        Blockly.Msg["LOGIC_BOOLEAN_FALSE"] = "false";
        Blockly.Msg["LOGIC_BOOLEAN_TRUE"] = "true";
        Blockly.Msg["LOGIC_NEGATE_TITLE"] = "not %1";
        Blockly.Msg["LOGIC_NULL"] = "null";
        Blockly.Msg["LOGIC_OPERATION_AND"] = "and";
        Blockly.Msg["LOGIC_OPERATION_OR"] = "or";
        Blockly.Msg["LOGIC_TERNARY_CONDITION"] = "test";
        Blockly.Msg["LOGIC_TERNARY_IF_FALSE"] = "if false";
        Blockly.Msg["LOGIC_TERNARY_IF_TRUE"] = "if true";
        Blockly.Msg["MATH_ADDITION_SYMBOL"] = "+";
        Blockly.Msg["MATH_ATAN2_TITLE"] = "atan2 of X:%1 Y:%2";
        Blockly.Msg["MATH_CHANGE_TITLE"] = "change %1 by %2";
        Blockly.Msg["MATH_CONSTRAIN_TITLE"] = "constrain %1 low %2 high %3";
        Blockly.Msg["MATH_DIVISION_SYMBOL"] = "÷";
        Blockly.Msg["MATH_IS_DIVISIBLE_BY"] = "is divisible by";
        Blockly.Msg["MATH_IS_EVEN"] = "is even";
        Blockly.Msg["MATH_IS_NEGATIVE"] = "is negative";
        Blockly.Msg["MATH_IS_ODD"] = "is odd";
        Blockly.Msg["MATH_IS_POSITIVE"] = "is positive";
        Blockly.Msg["MATH_IS_PRIME"] = "is prime";
        Blockly.Msg["MATH_IS_WHOLE"] = "is whole";
        Blockly.Msg["MATH_MODULO_TITLE"] = "remainder of %1 ÷ %2";
        Blockly.Msg["MATH_MULTIPLICATION_SYMBOL"] = "×";
        Blockly.Msg["MATH_ONLIST_HELPURL"] = "";
        Blockly.Msg["MATH_ONLIST_OPERATOR_AVERAGE"] = "average of list";
        Blockly.Msg["MATH_ONLIST_OPERATOR_MAX"] = "max of list";
        Blockly.Msg["MATH_ONLIST_OPERATOR_MEDIAN"] = "median of list";
        Blockly.Msg["MATH_ONLIST_OPERATOR_MIN"] = "min of list";
        Blockly.Msg["MATH_ONLIST_OPERATOR_MODE"] = "modes of list";
        Blockly.Msg["MATH_ONLIST_OPERATOR_RANDOM"] = "random item of list";
        Blockly.Msg["MATH_ONLIST_OPERATOR_STD_DEV"] = "standard deviation of list";
        Blockly.Msg["MATH_ONLIST_OPERATOR_SUM"] = "sum of list";
        Blockly.Msg["MATH_POWER_SYMBOL"] = "^";
        Blockly.Msg["MATH_RANDOM_FLOAT_TITLE_RANDOM"] = "random fraction";
        Blockly.Msg["MATH_RANDOM_INT_TITLE"] = "random integer from %1 to %2";
        Blockly.Msg["MATH_ROUND_OPERATOR_ROUND"] = "round";
        Blockly.Msg["MATH_ROUND_OPERATOR_ROUNDDOWN"] = "round down";
        Blockly.Msg["MATH_ROUND_OPERATOR_ROUNDUP"] = "round up";
        Blockly.Msg["MATH_SINGLE_OP_ABSOLUTE"] = "absolute";
        Blockly.Msg["MATH_SINGLE_OP_ROOT"] = "square root";
        Blockly.Msg["MATH_SUBTRACTION_SYMBOL"] = "-";
        Blockly.Msg["MATH_TRIG_ACOS"] = "acos";
        Blockly.Msg["MATH_TRIG_ASIN"] = "asin";
        Blockly.Msg["MATH_TRIG_ATAN"] = "atan";
        Blockly.Msg["MATH_TRIG_COS"] = "cos";
        Blockly.Msg["MATH_TRIG_SIN"] = "sin";
        Blockly.Msg["MATH_TRIG_TAN"] = "tan";
        Blockly.Msg["NEW_COLOUR_VARIABLE"] = "Create colour variable...";
        Blockly.Msg["NEW_NUMBER_VARIABLE"] = "Create number variable...";
        Blockly.Msg["NEW_STRING_VARIABLE"] = "Create string variable...";
        Blockly.Msg["NEW_VARIABLE"] = "Create variable...";
        Blockly.Msg["NEW_VARIABLE_TITLE"] = "New variable name:";
        Blockly.Msg["NEW_VARIABLE_TYPE_TITLE"] = "New variable type:";
        Blockly.Msg["ORDINAL_NUMBER_SUFFIX"] = "";
        Blockly.Msg["PROCEDURES_ALLOW_STATEMENTS"] = "allow statements";
        Blockly.Msg["PROCEDURES_BEFORE_PARAMS"] = "with:";
        Blockly.Msg["PROCEDURES_CALL_BEFORE_PARAMS"] = "with:";
        Blockly.Msg["PROCEDURES_CREATE_DO"] = "Create '%1'";
        Blockly.Msg["PROCEDURES_DEFNORETURN_COMMENT"] = "Describe this function...";
        Blockly.Msg["PROCEDURES_DEFNORETURN_DO"] = "";
        Blockly.Msg["PROCEDURES_DEFNORETURN_PROCEDURE"] = "do something";
        Blockly.Msg["PROCEDURES_DEFNORETURN_TITLE"] = "to";
        Blockly.Msg["PROCEDURES_DEFRETURN_RETURN"] = "return";
        Blockly.Msg["PROCEDURES_DEF_DUPLICATE_WARNING"] = "Warning: This function has duplicate parameters.";
        Blockly.Msg["PROCEDURES_HIGHLIGHT_DEF"] = "Highlight function definition";
        Blockly.Msg["PROCEDURES_IFRETURN_WARNING"] = "Warning: This block may be used only within a function definition.";
        Blockly.Msg["PROCEDURES_MUTATORARG_TITLE"] = "input name:";
        Blockly.Msg["PROCEDURES_MUTATORCONTAINER_TITLE"] = "inputs";
        Blockly.Msg["REDO"] = "Redo";
        Blockly.Msg["REMOVE_COMMENT"] = "Remove Comment";
        Blockly.Msg["RENAME_VARIABLE"] = "Rename variable...";
        Blockly.Msg["RENAME_VARIABLE_TITLE"] = "Rename all '%1' variables to:";
        Blockly.Msg["TEXT_APPEND_TITLE"] = "to %1 append text %2";
        Blockly.Msg["TEXT_CHANGECASE_OPERATOR_LOWERCASE"] = "to lower case";
        Blockly.Msg["TEXT_CHANGECASE_OPERATOR_TITLECASE"] = "to Title Case";
        Blockly.Msg["TEXT_CHANGECASE_OPERATOR_UPPERCASE"] = "to UPPER CASE";
        Blockly.Msg["TEXT_CHARAT_FIRST"] = "get first letter";
        Blockly.Msg["TEXT_CHARAT_FROM_END"] = "get letter # from end";
        Blockly.Msg["TEXT_CHARAT_FROM_START"] = "get letter #";
        Blockly.Msg["TEXT_CHARAT_LAST"] = "get last letter";
        Blockly.Msg["TEXT_CHARAT_RANDOM"] = "get random letter";
        Blockly.Msg["TEXT_CHARAT_TAIL"] = "";
        Blockly.Msg["TEXT_CHARAT_TITLE"] = "in text %1 %2";
        Blockly.Msg["TEXT_COUNT_MESSAGE0"] = "count %1 in %2";
        Blockly.Msg["TEXT_CREATE_JOIN_TITLE_JOIN"] = "join";
        Blockly.Msg["TEXT_GET_SUBSTRING_END_FROM_END"] = "to letter # from end";
        Blockly.Msg["TEXT_GET_SUBSTRING_END_FROM_START"] = "to letter #";
        Blockly.Msg["TEXT_GET_SUBSTRING_END_LAST"] = "to last letter";
        Blockly.Msg["TEXT_GET_SUBSTRING_INPUT_IN_TEXT"] = "in text";
        Blockly.Msg["TEXT_GET_SUBSTRING_START_FIRST"] = "get substring from first letter";
        Blockly.Msg["TEXT_GET_SUBSTRING_START_FROM_END"] = "get substring from letter # from end";
        Blockly.Msg["TEXT_GET_SUBSTRING_START_FROM_START"] = "get substring from letter #";
        Blockly.Msg["TEXT_GET_SUBSTRING_TAIL"] = "";
        Blockly.Msg["TEXT_INDEXOF_OPERATOR_FIRST"] = "find first occurrence of text";
        Blockly.Msg["TEXT_INDEXOF_OPERATOR_LAST"] = "find last occurrence of text";
        Blockly.Msg["TEXT_INDEXOF_TITLE"] = "in text %1 %2 %3";
        Blockly.Msg["TEXT_ISEMPTY_TITLE"] = "%1 is empty";
        Blockly.Msg["TEXT_JOIN_TITLE_CREATEWITH"] = "create text with";
        Blockly.Msg["TEXT_LENGTH_TITLE"] = "length of %1";
        Blockly.Msg["TEXT_PRINT_TITLE"] = "print %1";
        Blockly.Msg["TEXT_PROMPT_TYPE_NUMBER"] = "prompt for number with message";
        Blockly.Msg["TEXT_PROMPT_TYPE_TEXT"] = "prompt for text with message";
        Blockly.Msg["TEXT_REPLACE_MESSAGE0"] = "replace %1 with %2 in %3";
        Blockly.Msg["TEXT_REVERSE_MESSAGE0"] = "reverse %1";
        Blockly.Msg["TEXT_TRIM_OPERATOR_BOTH"] = "trim spaces from both sides of";
        Blockly.Msg["TEXT_TRIM_OPERATOR_LEFT"] = "trim spaces from left side of";
        Blockly.Msg["TEXT_TRIM_OPERATOR_RIGHT"] = "trim spaces from right side of";
        Blockly.Msg["TODAY"] = "Today";
        Blockly.Msg["UNDO"] = "Undo";
        Blockly.Msg["UNNAMED_KEY"] = "unnamed";
        Blockly.Msg["VARIABLES_DEFAULT_NAME"] = "item";
        Blockly.Msg["VARIABLES_GET_CREATE_SET"] = "Create 'set %1'";
        Blockly.Msg["VARIABLES_SET"] = "set %1 to %2";
        Blockly.Msg["VARIABLES_SET_CREATE_GET"] = "Create 'get %1'";
        Blockly.Msg["VARIABLE_ALREADY_EXISTS"] = "A variable named '%1' already exists.";
        Blockly.Msg["VARIABLE_ALREADY_EXISTS_FOR_ANOTHER_TYPE"] = "A variable named '%1' already exists for another type: '%2'.";
        Blockly.Msg["WORKSPACE_ARIA_LABEL"] = "Blockly Workspace";
        Blockly.Msg["WORKSPACE_COMMENT_DEFAULT_TEXT"] = "Say something...";


        Blockly.Msg["MATH_HUE"] = "230";
        Blockly.Msg["LOOPS_HUE"] = "120";
        Blockly.Msg["LISTS_HUE"] = "260";
        Blockly.Msg["LOGIC_HUE"] = "210";
        Blockly.Msg["VARIABLES_HUE"] = "330";
        Blockly.Msg["TEXTS_HUE"] = "160";
        Blockly.Msg["PROCEDURES_HUE"] = "290";
        Blockly.Msg["COLOUR_HUE"] = "20";
        Blockly.Msg["VARIABLES_DYNAMIC_HUE"] = "310";
    </script>
    <style>
        body {
            margin: 0;
            padding: 0;
            height: 100vh;
            width: 100%;
        }

        .main {
            width: 100%;
            height: 100%;
        }

        .middle {
            height: 100%;
            width: 100%;
        }

        #blocklyDiv {
            width: 80%;
            height: 100%;
        }

        #codeDiv {
            width: 20%;
            height: 100%;
            background: #000000;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }

        path {
            bottom: 0;
            height: 50%;

        }
    </style>
</head>

<body>
    <script>
        function saveWorkspace() {
            var xmlDom = Blockly.Xml.workspaceToDom(Blockly.mainWorkspace);
            var xmlText = Blockly.Xml.domToPrettyText(xmlDom);

            localStorage.setItem("blockly.xml", xmlText);
        }

        function loadWorkspace() {
            var xmlText = localStorage.getItem("blockly.xml");
            if (xmlText) {
                Blockly.mainWorkspace.clear();
                xmlDom = Blockly.Xml.textToDom(xmlText);
                Blockly.Xml.domToWorkspace(Blockly.mainWorkspace, xmlDom);
            }
        }
    </script>
    <div class="main">
        <div style="height:5%; display: flex;
        flex-direction: column; /*수직 정렬*/
        align-items:flex-end;
        justify-content: center;
        padding-right: 10px;">
            <div>
                <a class="waves-effect waves-light btn"
                    style="background-color: #5865F2; font-weight: bold; width:100px;height:40px;line-height: 40px;"
                    id="test">Test</a>
                <a class="waves-effect waves-light btn"
                    style="background-color: #5865F2; font-weight: bold; width:100px;height:40px;line-height: 40px;"
                    id="save">Save</a>
            </div>
        </div>
        <!-- 툴 박스 -->
        <xml id="toolbox" style="display: none">

            <category name="Event" colour="220">
                <block type="event_message"></block>
                <block type="event_ready"></block>
                <block type="event_memin"></block>
                <block type="event_memout"></block>
            </category>
            <category name="Act" colour="220">
                <block type="discord_send"></block>
                <block type="discord_edit"></block>
                <block type="discord_delete"></block>
            </category>
            <category name="Properties" colour="220">
                <block type="prop_user"></block>
                <block type="prop_id"></block>
                <block type="prop_content"></block>
                <block type="prop_channel"></block>
                <block type="prop_msg"></block>
            </category>
            <sep></sep>
            <category name="Logic" colour="#5C81A6">
                <block type="controls_if"></block>
                <block type="logic_compare">
                    <field name="OP">EQ</field>
                </block>
                <block type="logic_operation">
                    <field name="OP">AND</field>
                </block>
                <block type="logic_negate"></block>
                <block type="logic_boolean">
                    <field name="BOOL">TRUE</field>
                </block>
                <block type="logic_null"></block>
                <block type="logic_ternary"></block>
            </category>
            <category name="Loops" colour="#5CA65C">
                <block type="controls_repeat_ext">
                    <value name="TIMES">
                        <shadow type="math_number">
                            <field name="NUM">0</field>
                        </shadow>
                    </value>
                </block>
                <block type="controls_whileUntil">
                    <field name="MODE">WHILE</field>
                </block>
                <block type="controls_for">
                    <field name="VAR" id=")[(PctVvu3c`*IACnwmm">i</field>
                    <value name="FROM">
                        <shadow type="math_number">
                            <field name="NUM">0</field>
                        </shadow>
                    </value>
                    <value name="TO">
                        <shadow type="math_number">
                            <field name="NUM">0</field>
                        </shadow>
                    </value>
                    <value name="BY">
                        <shadow type="math_number">
                            <field name="NUM">0</field>
                        </shadow>
                    </value>
                </block>
                <block type="controls_forEach">
                    <field name="VAR" id="~a;YXk@k`X$Eb9]Z6{Me">j</field>
                </block>
                <block type="controls_flow_statements">
                    <field name="FLOW">BREAK</field>
                </block>
            </category>
            <category name="Math" colour="#5C68A6">
                <block type="math_round">
                    <field name="OP">ROUND</field>
                    <value name="NUM">
                        <shadow type="math_number">
                            <field name="NUM">0</field>
                        </shadow>
                    </value>
                </block>
                <block type="math_number">
                    <field name="NUM">0</field>
                </block>
                <block type="math_single">
                    <field name="OP">ROOT</field>
                    <value name="NUM">
                        <shadow type="math_number">
                            <field name="NUM">0</field>
                        </shadow>
                    </value>
                </block>
                <block type="math_trig">
                    <field name="OP">SIN</field>
                    <value name="NUM">
                        <shadow type="math_number">
                            <field name="NUM">0</field>
                        </shadow>
                    </value>
                </block>
                <block type="math_constant">
                    <field name="CONSTANT">PI</field>
                </block>
                <block type="math_number_property">
                    <mutation divisor_input="false"></mutation>
                    <field name="PROPERTY">EVEN</field>
                    <value name="NUMBER_TO_CHECK">
                        <shadow type="math_number">
                            <field name="NUM">0</field>
                        </shadow>
                    </value>
                </block>
                <block type="math_arithmetic">
                    <field name="OP">ADD</field>
                    <value name="A">
                        <shadow type="math_number">
                            <field name="NUM">0</field>
                        </shadow>
                    </value>
                    <value name="B">
                        <shadow type="math_number">
                            <field name="NUM">0</field>
                        </shadow>
                    </value>
                </block>
                <block type="math_on_list">
                    <mutation op="SUM"></mutation>
                    <field name="OP">SUM</field>
                </block>
                <block type="math_modulo">
                    <value name="DIVIDEND">
                        <shadow type="math_number">
                            <field name="NUM">0</field>
                        </shadow>
                    </value>
                    <value name="DIVISOR">
                        <shadow type="math_number">
                            <field name="NUM">0</field>
                        </shadow>
                    </value>
                </block>
                <block type="math_constrain">
                    <value name="VALUE">
                        <shadow type="math_number">
                            <field name="NUM">0</field>
                        </shadow>
                    </value>
                    <value name="LOW">
                        <shadow type="math_number">
                            <field name="NUM">0</field>
                        </shadow>
                    </value>
                    <value name="HIGH">
                        <shadow type="math_number">
                            <field name="NUM">0</field>
                        </shadow>
                    </value>
                </block>
                <block type="math_random_int">
                    <value name="FROM">
                        <shadow type="math_number">
                            <field name="NUM">0</field>
                        </shadow>
                    </value>
                    <value name="TO">
                        <shadow type="math_number">
                            <field name="NUM">0</field>
                        </shadow>
                    </value>
                </block>
                <block type="math_random_float"></block>
            </category>
            <category name="Text" colour="#5CA68D">
                <block type="text_charAt">
                    <mutation at="true"></mutation>
                    <field name="WHERE">FROM_START</field>
                    <value name="VALUE">
                        <block type="variables_get">
                            <field name="VAR" id="3lD0;=:EX{.QS(1_E}e_">item</field>
                        </block>
                    </value>
                </block>
                <block type="text">
                    <field name="TEXT"></field>
                </block>
                <block type="text_append">
                    <field name="VAR" id="3lD0;=:EX{.QS(1_E}e_">item</field>
                    <value name="TEXT">
                        <shadow type="text">
                            <field name="TEXT"></field>
                        </shadow>
                    </value>
                </block>
                <block type="text_length">
                    <value name="VALUE">
                        <shadow type="text">
                            <field name="TEXT"></field>
                        </shadow>
                    </value>
                </block>
                <block type="text_isEmpty">
                    <value name="VALUE">
                        <shadow type="text">
                            <field name="TEXT"></field>
                        </shadow>
                    </value>
                </block>
                <block type="text_indexOf">
                    <field name="END">FIRST</field>
                    <value name="VALUE">
                        <block type="variables_get">
                            <field name="VAR" id="3lD0;=:EX{.QS(1_E}e_">item</field>
                        </block>
                    </value>
                    <value name="FIND">
                        <shadow type="text">
                            <field name="TEXT"></field>
                        </shadow>
                    </value>
                </block>
                <block type="text_join">
                    <mutation items="2"></mutation>
                </block>
                <block type="text_getSubstring">
                    <mutation at1="true" at2="true"></mutation>
                    <field name="WHERE1">FROM_START</field>
                    <field name="WHERE2">FROM_START</field>
                    <value name="STRING">
                        <block type="variables_get">
                            <field name="VAR" id="3lD0;=:EX{.QS(1_E}e_">item</field>
                        </block>
                    </value>
                </block>
                <block type="text_changeCase">
                    <field name="CASE">UPPERCASE</field>
                    <value name="TEXT">
                        <shadow type="text">
                            <field name="TEXT"></field>
                        </shadow>
                    </value>
                </block>
                <block type="text_trim">
                    <field name="MODE">BOTH</field>
                    <value name="TEXT">
                        <shadow type="text">
                            <field name="TEXT"></field>
                        </shadow>
                    </value>
                </block>
                <block type="text_print">
                    <value name="TEXT">
                        <shadow type="text">
                            <field name="TEXT"></field>
                        </shadow>
                    </value>
                </block>
                <block type="text_prompt_ext">
                    <mutation type="TEXT"></mutation>
                    <field name="TYPE">TEXT</field>
                    <value name="TEXT">
                        <shadow type="text">
                            <field name="TEXT"></field>
                        </shadow>
                    </value>
                </block>
            </category>
            <category name="Lists" colour="#745CA6">
                <block type="lists_indexOf">
                    <field name="END">FIRST</field>
                    <value name="VALUE">
                        <block type="variables_get">
                            <field name="VAR" id="$nGj}F5dt?Fu8z!2-*~F">item</field>
                        </block>
                    </value>
                </block>
                <block type="lists_create_with">
                    <mutation items="0"></mutation>
                </block>
                <block type="lists_repeat">
                    <value name="NUM">
                        <shadow type="math_number">
                            <field name="NUM">0</field>
                        </shadow>
                    </value>
                </block>
                <block type="lists_length"></block>
                <block type="lists_isEmpty"></block>
                <block type="lists_create_with">
                    <mutation items="3"></mutation>
                </block>
                <block type="lists_getIndex">
                    <mutation statement="false" at="true"></mutation>
                    <field name="MODE">GET</field>
                    <field name="WHERE">FROM_START</field>
                    <value name="VALUE">
                        <block type="variables_get">
                            <field name="VAR" id="$nGj}F5dt?Fu8z!2-*~F">item</field>
                        </block>
                    </value>
                </block>
                <block type="lists_setIndex">
                    <mutation at="true"></mutation>
                    <field name="MODE">SET</field>
                    <field name="WHERE">FROM_START</field>
                    <value name="LIST">
                        <block type="variables_get">
                            <field name="VAR" id="$nGj}F5dt?Fu8z!2-*~F">item</field>
                        </block>
                    </value>
                </block>
                <block type="lists_getSublist">
                    <mutation at1="true" at2="true"></mutation>
                    <field name="WHERE1">FROM_START</field>
                    <field name="WHERE2">FROM_START</field>
                    <value name="LIST">
                        <block type="variables_get">
                            <field name="VAR" id="$nGj}F5dt?Fu8z!2-*~F">item</field>
                        </block>
                    </value>
                </block>
                <block type="lists_split">
                    <mutation mode="SPLIT"></mutation>
                    <field name="MODE">SPLIT</field>
                    <value name="DELIM">
                        <shadow type="text">
                            <field name="TEXT"></field>
                        </shadow>
                    </value>
                </block>
                <block type="lists_sort">
                    <field name="TYPE">NUMERIC</field>
                    <field name="DIRECTION">1</field>
                </block>
            </category>
            <category name="Variables" colour="330" custom="VARIABLE"></category>
            <category name="Functions" colour="290" custom="PROCEDURE"></category>
        </xml>
        <!-- 기본 div -->
        <div style="height:95%;width:100%; display: flex;">
            <div id="blocklyDiv">
                <script>
                    let workspace = Blockly.inject('blocklyDiv', {
                        toolbox: document.getElementById('toolbox'), zoom:
                        {
                            controls: false,
                            wheel: true,
                            startScale: 1.0,
                            maxScale: 2,
                            minScale: 0.2,
                            scaleSpeed: 1.2,
                            pinch: true
                        },
                        trashcan: false
                    });
                    loadWorkspace()
                    workspace.addChangeListener(saveWorkspace);
                </script>
            </div>
            <div id="codeDiv">
                <script>
                    let jscode
                    document.write("code here".fontcolor("white"))
                    var code = Blockly.JavaScript.workspaceToCode(workspace);
                    function livecodegen() {
                        var code = `const { Client, Intents } = require('discord.js');
                const client = new Client({ intents: [Intents.FLAGS.GUILDS] });
                const token = '<%= bot_token %>'
client.login(token);\n` + Blockly.JavaScript.workspaceToCode(workspace);
                        document.getElementById("codeDiv").innerHTML = code.replaceAll("\n", "<br>").fontcolor("white")
                        jscode = code;
                    };
                    workspace.addChangeListener(livecodegen);
                    function Copytest() {
                        navigator.clipboard.writeText(Blockly.JavaScript.workspaceToCode(workspace));
                    }
                </script>
            </div>
        </div>
    </div>

    <script>
        let testbtn = document.getElementById("test")
        let savebtn = document.getElementById("save")
        testbtn.addEventListener('click', () => {
            let xhr = new XMLHttpRequest()
            xhr.open('POST', '/bot/test_bot');
            xhr.setRequestHeader("Content-Type", "application/json")
            xhr.onreadystatechange = () => {
                if (xhr.status === 200 && xhr.readyState === 4) {
                    console.log('good')
                }
            }
            xhr.send(JSON.stringify({
                code: jscode
            }))
        })
    </script>
</body>

</html>